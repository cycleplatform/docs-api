openapi: 3.0.0
servers:
  - description: Cycle Public API
    url: 'https://api.cycle.io'
info:
  description: Cycle API
  version: 1.0.0
  title: Cycle API
  contact:
    email: support@cycle.io
tags:
  - name: Environments
    description: ''
security:
  - bearerAuth: []
    hubAuth: []
paths:
  /v1/account:
    get:
      operationId: getAccount
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Fetch Account
      description: Gets the account associated with the authenticated user token.
      responses:
        '200':
          description: Returns an account.
          content:
            application/json:
              schema:
                title: AccountResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/invites:
    get:
      operationId: getAccountInvites
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List Account Invites
      description: Lists invites associated with a given account.
      responses:
        '200':
          description: Returns a list of account invites.
          content:
            application/json:
              schema:
                title: AccountInvitesResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/account/invites/{inviteId}':
    get:
      operationId: updateAccountInvite
      security:
        - bearerAuth: []
      tags:
        - Accounts
      parameters:
        - name: inviteId
          description: The ID of the given invite.
          in: path
          required: true
          schema:
            type: string
      summary: Update Account Invite
      description: Update a given invite.
      responses:
        '200':
          description: Returns an membership resource.
          content:
            application/json:
              schema:
                title: UpdateAccountInviteResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/memberships:
    get:
      operationId: getAccountMemberships
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List Account Memberships
      description: Lists the memberships for a given account.
      responses:
        '200':
          description: List of membership resources.
          content:
            application/json:
              schema:
                title: AccountMembershipsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/logins:
    get:
      operationId: getAccountLogins
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List Account Logins
      description: Lists logins associated with a given account.
      responses:
        '200':
          description: Returns a collection of logins.
          content:
            application/json:
              schema:
                title: AccountLoginsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/EmployeeLogin'
                        - $ref: '#/components/schemas/PasswordLogin'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/billing/orders: {}
  '/v1/billing/orders/{orderId}': {}
  '/v1/billing/orders/{orderId}/tasks': {}
  /v1/billing/plans/support: {}
  /v1/billing/plans/tiers: {}
  /v1/billing/methods: {}
  '/v1/billing/methods/{methodId}': {}
  /v1/billing/invoices: {}
  '/v1/billing/invoices/{invoiceId}': {}
  '/v1/billing/invoices/{invoiceId}/tasks': {}
  /v1/billing/services: {}
  '/v1/billing/services/{servicesId}': {}
  /v1/billing/services/overages: {}
  /v1/billing/credits: {}
  '/v1/billing/credits/{creditsId}': {}
  /v1/environments:
    get:
      operationId: getEnvironments
      tags:
        - Environments
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - containers
                - containers_count
                - instances_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stacks
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: Get a list of environments
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a collection of environment resources.
          content:
            application/json:
              schema:
                title: EnvironmentListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Environment'
                  includes:
                    type: object
                    properties:
                      creators:
                        $ref: '#/components/schemas/CreatorInclude'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createEnvironment
      tags:
        - Environments
      parameters: []
      summary: Create Environment
      description: Requires the `environments-create` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateEnvironmentBody'
      responses:
        '201':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}':
    get:
      operationId: getEnvironmentById
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - containers
                - containers_count
                - instances_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stacks
      summary: Fetch Environment
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
                  includes:
                    type: object
                    properties:
                      creators:
                        $ref: '#/components/schemas/CreatorInclude'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateEnvironment
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Update Environment
      description: 'Updates the specificed environment, setting the values of the parameters passed. If any parameters are omitted, they will be left unchanged. Requires the `environments-update` capability.'
      requestBody:
        $ref: '#/components/requestBodies/UpdateEnvironmentBody'
      responses:
        '200':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeEnvironment
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Environment
      description: Requires the `environments-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/tasks':
    post:
      tags:
        - Environments
      operationId: createEnvironmentJob
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Create Environment Job
      description: 'Used to `start`, `stop`, or `delete` an environment. Requires the `environments-state` capability.'
      requestBody:
        description: Parameters for creating a new environment job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - start
                    - stop
                    - delete
                  description: The name of the action to perform.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/summary':
    post:
      tags:
        - Environments
      operationId: getEnvironmentSummary
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Environment Summary
      description: Fetches a single summary object for a specific environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns an environment summary object.
          content:
            application/json:
              schema:
                title: EnvironmentSummaryResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EnvironmentSummary'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/lb':
    get:
      operationId: getLoadBalancerInfo
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the load balancer resides.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch LB Info
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a load balancer info resource.
          content:
            application/json:
              schema:
                title: LoadBalancerEnvironmentService
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoadBalancerInfoReturn'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/lb/tasks':
    patch:
      operationId: reconfigureLoadBalancer
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The ID of the environment where this load balancer resides.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure LB
      description: Creates a task that will update the load balancer's configuration.
      requestBody:
        $ref: '#/components/requestBodies/LoadBalancerReconfigure'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/discovery/tasks':
    patch:
      operationId: reconfigureDiscovery
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The ID of the environment where this discovery service resides.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure Discovery
      description: Creates a task that will update the discovery service's configuration.
      requestBody:
        $ref: '#/components/requestBodies/DiscoveryReconfigure'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/vpn':
    get:
      operationId: getVPNInfo
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the VPN resides.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch VPN Info
      description: Requires the `environments-vpn` capability.
      responses:
        '200':
          description: Returns a VPNInfo resource.
          content:
            application/json:
              schema:
                title: VPNInfoEnvironmentService
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VPNInfoReturn'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/vpn/logins':
    get:
      operationId: getVPNLogins
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service resides.
          in: path
          required: true
          schema:
            type: string
      summary: List Logins
      description: Requires the `environments-vpn-manage` capability.
      responses:
        '200':
          description: Returns a VPNLoginsDoc resource.
          content:
            application/json:
              schema:
                title: VPNLoginsDocument
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VPNLogins'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/vpn/users':
    get:
      operationId: getVPNUsers
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service resides.
          in: path
          required: true
          schema:
            type: string
      summary: List VPN Users
      description: Requires the `environments-vpn-manage` capability.
      responses:
        '200':
          description: Returns a list of VPN users for the given VPN.
          content:
            application/json:
              schema:
                title: getVPNUsersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VPNUsers'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createVPNUser
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service resides.
          in: path
          required: true
          schema:
            type: string
      summary: Create VPN User
      description: Requires the `environments-vpn-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/VPNUserCreate'
      responses:
        '201':
          description: Returns a VPN user resource.
          content:
            application/json:
              schema:
                title: VPNUserResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VPNUsers'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/vpn/users/{userId}':
    delete:
      operationId: deleteVPNUser
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service the given user belongs to resides.
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: The userId of the user to be deleted.
          in: path
          required: true
          schema:
            type: string
      summary: Delete VPN user
      description: Requires the `environments-vpn-manage` capability.
      responses:
        '200':
          description: Returns a null data object.
          content:
            application/json:
              schema:
                title: VPNUserDeleteReturn
                type: object
                properties:
                  data:
                    type: string
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/services/vpn/tasks':
    post:
      operationId: reconfigureVPN
      tags:
        - Environment Services
      parameters:
        - name: environmentId
          description: The ID of the environment the VPN service resides in.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure VPN
      description: Requires the `environments-vpn-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/VPNReconfigure'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/environments/{environmentId}/telemetry/instances':
    get:
      operationId: getInstancesTelemetry
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the instances being reported on reside.
          in: path
          required: true
          schema:
            type: string
      summary: List Telemetry Data
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a collection of telemetry data points.
          content:
            application/json:
              schema:
                title: EnvironmentInstanceTelemetry
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InstanceTelemetry'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/containers:
    get:
      operationId: getContainers
      tags:
        - Containers
      summary: List Containers
      description: Requires the `containers-view` capability.
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - instances_count
                - domain
                - domains
                - ips
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Returns a collection of container resources.
          content:
            application/json:
              schema:
                title: ListContainersResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Container'
                  includes:
                    $ref: '#/components/schemas/ContainerIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createContainer
      tags:
        - Containers
      parameters: []
      summary: Create Container
      description: Requires the `containers-deploy` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateContainer'
      responses:
        '201':
          description: Returns an container resource.
          content:
            application/json:
              schema:
                title: ContainerResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}':
    get:
      operationId: getContainerById
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - instances_count
                - domain
                - domains
                - ips
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
      summary: Fetch Container
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an container resource.
          content:
            application/json:
              schema:
                title: ContainerResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateContainer
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the container.
          in: path
          required: true
          schema:
            type: string
      summary: Update Container
      description: 'Updates the specified container, setting the values of the parameters passed.  If any parameters are omitted, they will be left unchanged. Requires the `contianers-update` capability.'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContainer'
      responses:
        '200':
          description: Returns the updated container resource.
          content:
            application/json:
              schema:
                title: ContainerUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeContainer
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Container
      description: Requires the `contianers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/summary':
    get:
      operationId: getContainerSummary
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Container Summary
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an container summary resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContainerSummary'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/tasks':
    post:
      tags:
        - Containers
      operationId: createContainerJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Create Container Job
      description: 'Used to perform different actions on a given container. Requires the `containers-state`, `containers-update`, or `containers-volumes-manage` capability (respectively).'
      requestBody:
        description: Parameters for creating a new container job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ContainerAction'
                - $ref: '#/components/schemas/ReconfigureContainer'
                - $ref: '#/components/schemas/ReconfigureVolumes'
                - $ref: '#/components/schemas/Reimage'
                - $ref: '#/components/schemas/Scale'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances':
    get:
      operationId: getInstances
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the container this instance is created from.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - locations
                - providers
                - containers
                - environments
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Instances
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a collection of contianer instance resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createContainerInstance
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the container this instance is created from.
          in: path
          required: true
          schema:
            type: string
      summary: Create Instance(s)
      description: Requires the `containers-update` capability.
      requestBody:
        $ref: '#/components/requestBodies/InstanceCreate'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeMultipleContainerInstances
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the container the instance(s) were created from.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Instance(s)
      description: Requires the `containers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}':
    get:
      operationId: getContainerInstance
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - locations
                - providers
                - containers
                - environments
      summary: Fetch Instance
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a container instance resource.
          content:
            application/json:
              schema:
                title: ContainerInstanceResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeContainerInstance
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Instance
      description: Requires the `containers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/ssh':
    get:
      operationId: getSSHConnection
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch SSH Credentials
      description: Requires the `containers-ssh` capability.
      responses:
        '200':
          description: Returns a SSH connection response.
          content:
            application/json:
              schema:
                title: ContainerInstanceSSHResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SSHResponse'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: expireInstanceSSHTokens
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Expire SSH Credentials
      description: Requires the `containers-ssh` capability.
      responses:
        '200':
          description: Returns a data object holding the amount of tokens removed.
          content:
            application/json:
              schema:
                title: ExpireSSHTokenResponse
                type: object
                properties:
                  data:
                    type: object
                    description: The number of tokens expired.
                    required:
                      - tokens
                    properties:
                      tokens:
                        type: integer
                        description: The number of tokens expired.
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/tasks':
    post:
      tags:
        - Instances
      operationId: createContainerInstanceJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Create Instance Task
      description: 'Used to perform different actions on a given container instance, requries `containers-instance-migrate` capability.'
      requestBody:
        description: Parameters for creating a new container instance job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RevertMigration'
                - $ref: '#/components/schemas/Migrate'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/volumes':
    get:
      operationId: getContainerInstanceVolumes
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Instance Volume(s)
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an array of container instance volume resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceVolumeResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InstanceVolume'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/telemetery/resources/report':
    get:
      operationId: getInstanceResourcesTelemetryReport
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Instance Telemetry Report
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an instance telemetry report.
          content:
            application/json:
              schema:
                title: InstaceTelemetryReportReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InstanceTelemetryReport'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/servers':
    get:
      operationId: ContainersListServers
      tags:
        - Containers
      summary: List Container Servers
      description: Requires the `containers-view` capability.
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - primary_ip
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Returns a list of server instance resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceServerListResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServersList'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/servers/usable':
    get:
      operationId: getUsableServers
      tags:
        - Containers
      summary: List Usable Servers
      description: Requires the `containers-view` capability.
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - location
                - models
                - providers
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Returns a list of server resources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/compatible-images':
    get:
      operationId: getCompatibleImages
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Compatible Images
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a collection of image resources.
          content:
            application/json:
              schema:
                title: CompatibleImagesReponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/backups':
    get:
      operationId: getBackupsCollection
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: List Backups
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a list of container backup resources.
          content:
            application/json:
              schema:
                title: ConatainerBackupListResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Backup'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/backups/{backupId}':
    get:
      operationId: getBackup
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Backup
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a backup resource.
          content:
            application/json:
              schema:
                title: SingleBackupReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Backup'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeBackup
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Backup
      description: Requires the `containers-backups-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/backups/{backupId}/tasks':
    post:
      tags:
        - Backups
      operationId: restoreBackupJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID of the backup.
          in: path
          required: true
          schema:
            type: string
      summary: Create Backup Job
      description: Used to restore a backup for a given container instance. Requires the `containers-backups-manage` capability.
      requestBody:
        description: Parameters for creating a new backup job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  enum:
                    - restore
                  description: The action to take.
                contents:
                  type: object
                  description: Additional information the platform needs to create this job.
                  required:
                    - instance_id
                  properties:
                    instance_id:
                      type: string
                      description: The ID of the instance this backup is being restored to.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/backups/{backupId}/logs':
    get:
      operationId: getBackupLogs
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: List Backup Logs
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a collection of backup logs.
          content:
            application/json:
              schema:
                title: EnvironmentBackupsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Logs'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/dns/zones:
    get:
      operationId: getZonesCollection
      tags:
        - DNS
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List DNS Zones
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a collection of DNS zone resources.
          content:
            application/json:
              schema:
                title: DNSZoneListReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Zone'
                  includes:
                    $ref: '#/components/schemas/ZoneIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createDNSZone
      tags:
        - DNS
      parameters: []
      summary: Create DNS Zone
      description: Requires the `dns-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateZoneRequest'
      responses:
        '201':
          description: Returns the DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/dns/{zoneId}':
    get:
      operationId: getDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch DNS Zone
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a DNS zone resource.
          content:
            application/json:
              schema:
                title: SingleDNSZoneReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
      summary: Update DNS Zone
      description: Requires the `dns-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateZoneRequest'
      responses:
        '200':
          description: Returns a DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
                  includes:
                    $ref: '#/components/schemas/ZoneIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Delete DNS Zone
      description: Requires the `dns-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/dns/{zoneId}/tasks':
    post:
      operationId: DNSZoneTask
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Create DNS Zone Job
      description: 'Used to perform different actions on a given DNS zone, requires the `dns-manage` capability.'
      requestBody:
        description: Parameters for creating a new DNS zone job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action that the job will take.
                  enum:
                    - verify
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/dns/{zoneId}/records':
    get:
      operationId: getRecordsCollection
      tags:
        - DNS Record
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Records
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a collection of DNS zone resources.
          content:
            application/json:
              schema:
                title: DNSZoneRecordListReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Record'
                  includes:
                    $ref: '#/components/schemas/RecordIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createDNSRecord
      tags:
        - DNS Record
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Create Record
      description: Requires the `dns-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateRecordRequest'
      responses:
        '201':
          description: Returns the DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Record'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/dns/{zoneId}/records/{recordId}':
    patch:
      operationId: updateDNSRecord
      tags:
        - DNS Record
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Update a single DNS Record
      description: Requires the `dns-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateDNSRecordRequest'
      responses:
        '200':
          description: Returns a DNS record resource.
          content:
            application/json:
              schema:
                title: DNSRecordUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Record'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeDNSRecord
      tags:
        - DNS Record
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Record
      description: Requires the `dns-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/dns/{zoneId}/records/{recordId}/tasks':
    post:
      operationId: DNSRecordTask
      tags:
        - DNS Record
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Create a DNS record Job
      description: 'Used to perform different actionson a given DNS record, requires the `dns-manage` capability.'
      requestBody:
        description: Parameters for creating a new DNS zone job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action that the job will take.
                  enum:
                    - generateCert
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/dns/tls/attempts:
    get:
      operationId: DNSTLSAttempts
      tags:
        - DNS
      parameters: []
      summary: List TLS Generate Attempts
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a list of TLS certificate generation attempt resources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Attempt'
  /v1/hubs:
    get:
      operationId: getHubs
      tags:
        - Hubs
      security:
        - bearerAuth: []
      summary: List Hubs
      description: Lists all associated hubs.
      responses:
        '200':
          description: Returns a list of hub resources.
          content:
            application/json:
              schema:
                title: ListHubsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hub'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters: []
      summary: Create Hub
      description: Create a hub resource.
      requestBody:
        $ref: '#/components/requestBodies/CreateHubRequest'
      responses:
        '200':
          description: Returns a hub resource.
          content:
            application/json:
              schema:
                title: HubCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current:
    get:
      operationId: getHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: hubId
          description: The ID of the requested hub.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - memberships
      summary: Fetch Hub
      description: Requires the `hubs-view` capability.
      responses:
        '200':
          description: Returns an hub resource.
          content:
            application/json:
              schema:
                title: HubFetchReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateHub
      tags:
        - Hubs
      parameters: []
      summary: Update Hub
      description: 'Updates the specified hub, setting the values of the parameters passed.'
      requestBody:
        $ref: '#/components/requestBodies/UpdateHubRequest'
      responses:
        '200':
          description: Returns the updated Hub resource.
          content:
            application/json:
              schema:
                title: HubUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters: []
      summary: Delete Hub
      description: Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/activity:
    get:
      operationId: getHubActivity
      tags:
        - Hubs
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Activity
      description: Doesn't require a specific capability.
      responses:
        '200':
          description: Returns a collection of activity resources.
          content:
            application/json:
              schema:
                title: ListActivityResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  includes:
                    $ref: '#/components/schemas/ActivityIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/capabilities:
    get:
      operationId: getHubCapabilities
      tags:
        - Hubs
      parameters: []
      security: []
      summary: List Hub Capabilities
      description: Does not require a capability.
      responses:
        '200':
          description: Returns a list of capabilities.
          content:
            application/json:
              schema:
                title: HubCapabilitiesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Capabilities'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/usage: {}
  /v1/hubs/current/tier: {}
  '/v1/hubs/current/invites/{inviteId}':
    delete:
      operationId: deleteHubInvite
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: inviteId
          description: The ID of the hub invite.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Hub Invite
      description: Requires the `hub-invites-manage` capability.
      responses:
        '200':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: DeleteHubInviteReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/invites:
    get:
      operationId: getHubInvites
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Hub Invites
      description: Requires the `hubs-invites-manage` capability.
      responses:
        '200':
          description: Returns a list of membership resources.
          content:
            application/json:
              schema:
                title: ListHubInvitesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createHubInvite
      tags:
        - Hubs
      parameters: []
      summary: Create Hub Invite
      description: Requires the `hubs-invites-send` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateHubInviteRequest'
      responses:
        '201':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: CreateHubInviteReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/members:
    get:
      operationId: getHubMembers
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Hub Memberships
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a list of memebership resources.
          content:
            application/json:
              schema:
                title: ListHubMembersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/membership: {}
  '/v1/hubs/current/members/{memberId}':
    get:
      operationId: getHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
      summary: Fetch Hub Member
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a membership resource.
          content:
            application/json:
              schema:
                title: FetchHubMemberReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateHubMemberRequest'
      responses:
        '200':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: UpdateHubMemberReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Hub Member
      description: Requires the `hubs-members-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/hubs/current/members/account/{accountId}':
    get:
      operationId: getHubMembersAccount
      tags:
        - Hubs
      parameters:
        - name: accountId
          description: The ID of the member account.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
      summary: Fetch Members Account
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a membership resource.
          content:
            application/json:
              schema:
                title: FetchHubMembersAccountReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/api-keys:
    get:
      operationId: getAPIKeys
      tags:
        - APIKeys
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List API Keys
      description: Requires the `api-keys-manage` capability.
      responses:
        '200':
          description: Returns a collection of API Key resources.
          content:
            application/json:
              schema:
                title: ListAPIKeysResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createAPIKey
      tags:
        - APIKeys
      parameters: []
      summary: Create API Key
      description: Requires the `api-keys-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateAPIKeyRequest'
      responses:
        '201':
          description: Returns an API Key resource.
          content:
            application/json:
              schema:
                title: CreateAPIKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/hubs/current/api-keys/{apikeyId}':
    get:
      operationId: getAPIKey
      tags:
        - APIKeys
      parameters:
        - name: apikeyId
          description: The ID of the API Key.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch API Key
      description: Requries the `api-keys-manage` capability.
      responses:
        '200':
          description: Returns an API Key resource.
          content:
            application/json:
              schema:
                title: FetchAPIKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateAPIKey
      tags:
        - APIKeys
      parameters:
        - name: apikeyId
          description: The ID of the API Key.
          in: path
          required: true
          schema:
            type: string
      summary: Update API Key
      description: Requires the `api-keys-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateAPIKeyRequest'
      responses:
        '200':
          description: Returns and API Key resource.
          content:
            application/json:
              schema:
                title: UpdateAPIKeyReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/APIKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/images:
    get:
      operationId: getImages
      tags:
        - Images
      summary: List Images
      description: Requires the `images-view` capability.
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stack_builds
                - stacks
                - sources
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Returns a collection of image resources.
          content:
            application/json:
              schema:
                title: ImagesListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
                  includes:
                    $ref: '#/components/schemas/ImageIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createImages
      tags:
        - Images
      parameters: []
      summary: Create Image
      description: Requires the `images-import` capability.
      requestBody:
        $ref: '#/components/requestBodies/ImageCreateRequest'
      responses:
        '201':
          description: Returns an image resource.
          content:
            application/json:
              schema:
                title: ImagesCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/images/{imageId}':
    get:
      operationId: getImage
      tags:
        - Images
      summary: Fetch Image
      description: Requires the `images-view` capability.
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stack_builds
                - stacks
                - sources
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Returns a image resource.
          content:
            application/json:
              schema:
                title: ImagesFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
                  includes:
                    $ref: '#/components/schemas/ImageIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateImage
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      summary: Update Image
      description: Requires the `images-updae` capability.
      requestBody:
        $ref: '#/components/requestBodies/ImageUpdateRequest'
      responses:
        '200':
          description: Returns an image resource.
          content:
            application/json:
              schema:
                title: ImagesCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeImage
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      summary: Delete Image
      description: Requires the `images-updae` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/images/{imageId}/containers':
    get:
      operationId: getImagesContainers
      tags:
        - Images
      summary: List Images Containers
      description: Requires the `images-view` and `containers-view` capabilties.
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: returns a list of container resources
          content:
            application/json:
              schema:
                title: ListImageContainersResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Container'
                  includes:
                    $ref: '#/components/schemas/ContainerIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/images/{imageId}/build-log':
    get:
      operationId: getImageBuildLog
      tags:
        - Images
      summary: Fetch Build Log
      description: Requires the `images-view` capability.
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      responses:
        '200':
          description: Returns a build log resource.
          content:
            application/json:
              schema:
                title: ImageBuildLogResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BuildLog'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/images/sources:
    get:
      operationId: getSourcesCollection
      tags:
        - Image Sources
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - images_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Sources
      description: Requires the `images-view` capability.
      responses:
        '200':
          description: Returns a collection of image source resources.
          content:
            application/json:
              schema:
                title: ImageSourceCollectionResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageSource'
                  includes:
                    $ref: '#/components/schemas/SourceIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createImageSource
      tags:
        - Image Sources
      parameters: []
      summary: Create Source
      description: requires the `images-import` capability.
      requestBody:
        $ref: '#/components/requestBodies/SourceCreateRequest'
      responses:
        '201':
          description: Returns an image source resource.
          content:
            application/json:
              schema:
                title: ImageSourceCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/images/sources/{sourceId}':
    get:
      operationId: getSource
      tags:
        - Image Sources
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - images_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
      summary: Fetch Source
      description: Requires the `images-view` capability.
      responses:
        '200':
          description: Returns a single image source.
          content:
            application/json:
              schema:
                title: ImageSourceFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateImageSource
      tags:
        - Image Sources
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
      summary: Update Source
      description: Requires the `images-import` capability.
      requestBody:
        $ref: '#/components/requestBodies/SourceUpdateRequest'
      responses:
        '200':
          description: Returns an image source resource.
          content:
            application/json:
              schema:
                title: ImageSourceCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteImageSource
      tags:
        - Images
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
      summary: Delete a given image source
      description: Requires the `images-import` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/summary:
    get:
      operationId: getInfrastructureSummary
      tags:
        - Infrastructure
      parameters: []
      summary: Fetch Infrastructure Summary
      description: Requires the `infrastructure-servers-view` capability.
      responses:
        '200':
          description: Returns an infrastructure summary.
          content:
            application/json:
              schema:
                title: InfrastructureSummaryResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfrastructureSummary'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/providers/native:
    get:
      operationId: getNativeProviders
      tags:
        - Providers
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Native Providers
      description: 'No capability required, public information.'
      responses:
        '200':
          description: Returns a list of natively supported providers.
          content:
            application/json:
              schema:
                title: ListNativeProvidersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Native'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/providers/{providerId}/servers':
    get:
      operationId: getProviderServers
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Provider Servers
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A list of currently provisioned servers from a provider.
          content:
            application/json:
              schema:
                title: ListProviderServersReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProviderServer'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/providers/{providerId}/locations':
    get:
      operationId: getProviderLocations
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Provider Locations
      description: 'No capability required, public information (datacenter locations).'
      responses:
        '200':
          description: Returns a list of provider locations.
          content:
            application/json:
              schema:
                title: ProviderLocationsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/providers:
    get:
      operationId: getProviders
      tags:
        - Providers
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Providers
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A collection of providers.
          content:
            application/json:
              schema:
                title: ListProvidersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Provider'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createProvider
      tags:
        - Providers
      parameters: []
      summary: Create Provider
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateProviderRequest'
      responses:
        '201':
          description: Returns a provider resource.
          content:
            application/json:
              schema:
                title: ProviderCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/providers/{providerId}':
    get:
      operationId: getProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Provider
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A single provider resource.
          content:
            application/json:
              schema:
                title: FetchProviderReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Update Provider
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateProviderRequest'
      responses:
        '200':
          description: Returns a provider resource.
          content:
            application/json:
              schema:
                title: ProviderUpdateReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Provider
      description: Requires the `infrastructure-providers-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/providers/{providerId}/tasks':
    post:
      tags:
        - Providers
      operationId: createProviderJob
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Providers Jobs
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        description: Parameters for creating a provider job.
        content:
          application/json:
            schema:
              title: VerifyProviderAction
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action the job takes.
                  enum:
                    - verify
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/servers:
    get:
      operationId: getServersCollection
      tags:
        - Servers
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - models
                - providers
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Servers
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A collection of server resources.
          content:
            application/json:
              schema:
                title: ServerCollectionReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createServer
      tags:
        - Servers
      parameters: []
      summary: Create Server
      description: Requires the `servers-provision` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateServerRequest'
      responses:
        '201':
          description: Returns a single server resource.
          content:
            application/json:
              schema:
                title: ServerCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}':
    get:
      operationId: getSingleServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - models
                - providers
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
      summary: Fetch Server
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A single server resource.
          content:
            application/json:
              schema:
                title: ServerFetchReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Update Server
      description: Requires the `servers-update` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateServerRequest'
      responses:
        '200':
          description: A server resource.
          content:
            application/json:
              schema:
                title: ServerUpdateReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: removeServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}/telemetry':
    get:
      operationId: getServerTelemetery
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Sever Telemetry
      description: Requires the `servers-view` capability. This call requires the filter query be used.
      responses:
        '200':
          description: A list of telemetry points.
          content:
            application/json:
              schema:
                title: ServerTelemetryReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Telemetry'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}/instances':
    get:
      operationId: getServerInstances
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creator
                - servers
                - locations
                - providers
                - containers
                - environments
      summary: List Server Instances
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: A list of instance resources.
          content:
            application/json:
              schema:
                title: GetServerInstancesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}/tasks':
    post:
      tags:
        - Servers
      operationId: createServerJob
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Create Server Job
      description: Used to perform different actions on a given server. Requires the `servers-state` capability.
      requestBody:
        description: Parameters for creating the new server job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ReconfigureServer'
                - $ref: '#/components/schemas/RestartServer'
                - $ref: '#/components/schemas/RestartCompute'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}/tags':
    get:
      operationId: getServersTags
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: List Server Tags
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: Returns a list of server tags.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTags'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/servers/clusters:
    get:
      operationId: GetServersClusters
      tags:
        - Servers
      summary: List Servers Clusters
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A collection of cluster identifiers.
          content:
            application/json:
              schema:
                title: ServerClustersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/servers/{serverId}/usage':
    get:
      operationId: GetServerUsage
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Server Usage
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: Server data usage collection.
          content:
            application/json:
              schema:
                title: ServerUsageReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UsageDatum'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/ips/pools:
    get:
      operationId: getInfrastructureIPPools
      tags:
        - Infrastructure IPs
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - providers
                - locations
      summary: List Pools
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A collection of pool resources.
          content:
            application/json:
              schema:
                title: IPPoolsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pool'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/ips/pools/{poolId}':
    get:
      operationId: getInfrastructureIPPool
      tags:
        - Infrastructure IPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Pool IP
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A single pool resource.
          content:
            application/json:
              schema:
                title: IPPoolReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pool'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteIPPool
      tags:
        - Infrastructure IPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Pool IP
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/infrastructure/ips/pools/{poolId}/ips':
    get:
      operationId: getPoolsIPs
      tags:
        - Infrastructure IPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
      summary: List Pool IP's
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A collection of IPs.
          content:
            application/json:
              schema:
                title: GetPoolsIPReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IP'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/infrastructure/deployment-strategies:
    get:
      operationId: getDeploymentStrategies
      tags:
        - Infrastructure
      parameters: []
      summary: Fetch Deployment Strategies
      description: This endpoint returns available container deployment strategies.
      responses:
        '200':
          description: Deployment strategies.
          content:
            application/json:
              schema:
                title: DeploymentStrategiesReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeploymentStrat'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/jobs:
    get:
      operationId: getJobs
      tags:
        - Jobs
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Jobs.
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A collection of job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/jobs/{jobId}':
    get:
      operationId: getJob
      tags:
        - Jobs
      parameters:
        - name: jobId
          description: The ID for the given job.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Job
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Job'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/jobs/latest:
    get:
      operationId: getLatestJobs
      tags:
        - Jobs
      parameters: []
      summary: List Latest Jobs
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A collection of job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/stacks:
    get:
      operationId: getStacks
      tags:
        - Stacks
      summary: List Stacks
      description: Requires the `stacks-view` permission.
      parameters:
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: A collection of stack resources.
          content:
            application/json:
              schema:
                title: ListStacksResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stack'
                  includes:
                    $ref: '#/components/schemas/StackInclude'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createStack
      tags:
        - Stacks
      parameters: []
      summary: Create Stack
      description: Requires the `stacks-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateStackRequest'
      responses:
        '201':
          description: Returns a stack resource.
          content:
            application/json:
              schema:
                title: StackCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/{stackId}':
    get:
      operationId: getStack
      tags:
        - Stacks
      summary: Fetch Stack
      description: Requires the `stacks-view` capability.
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      responses:
        '200':
          description: Returns a stack resource.
          content:
            application/json:
              schema:
                title: StackFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateStack
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Update Stack
      description: Requires the `stacks-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateStackRequest'
      responses:
        '200':
          description: Returns an updated stack resource.
          content:
            application/json:
              schema:
                title: UpdateStackResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteStack
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Delete Stack
      description: Requires the `stacks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/{stackId}/tasks':
    post:
      tags:
        - Stacks
      operationId: createStackJob
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Create Stack Job
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PruneStackBuildsAction'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/builds/{buildId}':
    get:
      operationId: getStackBuildLookup
      tags:
        - Stacks
      parameters:
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Fetch Stack Build
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: StackBuildLookupResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/{stackId}/builds':
    get:
      operationId: getStackBuilds
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: 'A comma separated list of meta values. Meta values will show up under a resource''s `meta` field. In the case of applying a meta to a collection of resources, each resource will have it''s own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.'
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - stack_id
                - hub_id
                - about
                - instructions
                - events
                - state
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Builds
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a collection of stack builds.
          content:
            application/json:
              schema:
                title: StackBuildsCollectionResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StackBuild'
                  includes:
                    $ref: '#/components/schemas/StackBuildInclude'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Create Stack Build
      description: Requires the `stacks-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateStackBuildRequest'
      responses:
        '201':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: StackBuildCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/{stackId}/builds/{buildId}':
    get:
      operationId: getStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Fetch Stack Build
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: FetchStackBuildResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Delete Stack Build
      description: Requires the `stacks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/stacks/{stackId}/builds/{buildId}/tasks':
    post:
      tags:
        - Stacks
      operationId: createStackBuildJob
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Create Stack Build Job
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack build job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GenerateStackBuildAction'
                - $ref: '#/components/schemas/DeployStackBuildAction'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sdn/networks:
    get:
      operationId: getNetworks
      tags:
        - SDN
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - environemnts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List SDNs
      description: Requires the `sdn-networks-view` capability.
      responses:
        '200':
          description: Returns a collection of network resources.
          content:
            application/json:
              schema:
                title: SDNListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SDNNetwork'
                  includes:
                    $ref: '#/components/schemas/NetworkIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createSDNNetwork
      tags:
        - SDN
      parameters: []
      summary: Create SDN
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateSDNRequest'
      responses:
        '201':
          description: Returns a network resource.
          content:
            application/json:
              schema:
                title: SDNCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/sdn/networks/{networkId}':
    get:
      operationId: getNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Fetch SDN
      description: Requires the `sdn-networks-view` capability.
      responses:
        '200':
          description: Returns a single network resource.
          content:
            application/json:
              schema:
                title: SDNFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateSDNNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Update SDN
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdateSDNRequest'
      responses:
        '200':
          description: Returns a network resource.
          content:
            application/json:
              schema:
                title: SDNUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteSDNNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Delete SDN
      description: Requires the `sdn-networks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/sdn/networks/{networkId}/tasks':
    post:
      tags:
        - Images
      operationId: createNetworkJob
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Create SDN Job
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        description: Parameters for creating a new sdn job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReconfigureSDNAction'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/pipelines:
    get:
      operationId: getPipelines
      tags:
        - Pipelines
      parameters:
        - name: include
          in: query
          required: false
          description: 'A comma separated list of include values. Included resources will show up under the root document''s `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.'
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - name
                - components
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Pipelines
      description: Requires the `pipelines-view` capability.
      responses:
        '200':
          description: Returns a collection of pipeline resources.
          content:
            application/json:
              schema:
                title: ListPipelineResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  includes:
                    $ref: '#/components/schemas/PipelineIncludes'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPipeline
      tags:
        - Pipelines
      parameters: []
      summary: Create Pipeline
      description: Requires the `pipelines-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreatePipelineRequest'
      responses:
        '201':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: PipelineCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/pipelines/{pipelineId}':
    get:
      operationId: getPipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Fetch Pipeline
      description: Requires the `pieplines-view` capability.
      responses:
        '200':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: FetchPipelineResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updatePipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Pipeline
      description: Requires the `pipelines-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/UpdatePipelineRequest'
      responses:
        '200':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: FetchPipelineResource
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Delete Pipeline
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/pipelines/{pipelineId}/tasks':
    post:
      tags:
        - Pipelines
      operationId: createPipelineJob
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Pipeline Job
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Parameters for creating a new pipeline job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerPipelineAction'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/pipelines/{pipelineId}/keys':
    get:
      operationId: getPipelineTriggerKeys
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      summary: List Trigger Keys
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a collection of trigger key resources.
          content:
            application/json:
              schema:
                title: ListPipelineTriggerKeyResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TriggerKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Trigger Key
      description: Requires the `pipelines-manage` capability.
      requestBody:
        $ref: '#/components/requestBodies/CreateTriggerKeyRequest'
      responses:
        '201':
          description: Returns a trigger key resource.
          content:
            application/json:
              schema:
                title: PipelineTriggerKeyCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TriggerKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/pipelines/{pipelineId}/keys/{triggerKeyId}':
    get:
      operationId: getPipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: triggerKeyId
          in: path
          required: true
          description: The ID of the trigger key.
          schema:
            type: string
      summary: Fetch Trigger Key
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a trigger key resource.
          content:
            application/json:
              schema:
                title: FetchPipelineTriggerKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TriggerKey'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updatePipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: triggerKeyId
          in: path
          required: true
          description: The ID of the trigger key.
          schema:
            type: string
      summary: Update Trigger Key
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/hubs/current/notifications:
    get:
      tags:
        - WebsocketAuth
      parameters: []
      summary: Hub Notification Pipeline Auth
      description: Requires the `hubs-notifications-listen` capability.
      responses:
        '200':
          description: Returns a token.
          content:
            application/json:
              schema:
                title: HubNotificationAuthResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubNotificationToken'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/console':
    get:
      tags:
        - WebsocketAuth
      parameters:
        - name: containerId
          in: path
          required: true
          description: The ID for the container
          schema:
            type: string
        - name: instanceId
          in: path
          required: true
          description: The ID of the instance.
          schema:
            type: string
      summary: Instance Console Auth
      description: Requires the `contaiers-console` capability.
      responses:
        '200':
          description: Returns a token and address.
          content:
            application/json:
              schema:
                title: InstanceConsoleAuthResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InstanceConsoleAuth'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream':
    get:
      tags:
        - WebsocketAuth
      parameters:
        - name: containerId
          in: path
          required: true
          description: The ID for the container
          schema:
            type: string
        - name: instanceId
          in: path
          required: true
          description: The ID of the instance.
          schema:
            type: string
      summary: Instance Telemetry Auth
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a token and an address.
          content:
            application/json:
              schema:
                title: InstanceTelemeteryStreamAuthResponse
                properties:
                  data:
                    $ref: '#/components/schemas/InstanceTelemetryStreamAuth'
        '400':
          description: This usually means the data sent was in an invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: OAuth token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested resource doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indicates an issue with Cycle. Rare.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    hubAuth:
      name: X-Hub-Id
      in: header
      type: apiKey
      description: Defines the scope of the request to a specific Hub.
  parameters:
    FilterParam:
      name: filter
      in: query
      required: false
      description: 'The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you''re filtering for. For example, you may want to find all containers using image X. In this case, you''d pass a filter of `?filter[image]=X`'
      schema:
        type: string
    PageParam:
      name: page
      in: query
      required: false
      description: 'In a list return, the data associated with the page number and size returned.'
      explode: true
      style: deepObject
      schema:
        type: object
        properties:
          number:
            type: number
            description: The page to jump to
          size:
            type: number
            description: The number of resources returned per page.
    SortParam:
      name: sort
      in: query
      required: false
      description: 'An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.'
      schema:
        type: string
  requestBodies:
    CreateAPIKeyRequest:
      description: Parameters for creating an API Key.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name given to the API Key.
              permissions:
                $ref: '#/components/schemas/Permissions'
              capabilities:
                type: object
                description: An object defining the capabilities of the given API key.
                required:
                  - all
                  - specific
                properties:
                  all:
                    type: boolean
                    description: A boolean where true is giving the key all grantable capabilities.
                  specific:
                    type: array
                    description: An array of capabilites.
                    items:
                      $ref: '#/components/schemas/Capabilities'
              ips:
                type: array
                nullable: true
                description: An array of approved IPs from which this API Key can be used.
                items:
                  type: string
    CreateContainer:
      description: Parameters for creating a new container.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - environment_id
              - image_id
              - stateful
              - config
            properties:
              name:
                type: string
                description: A user defined name for the container.
              environment_id:
                type: string
                description: An identifier for the environment this container will be deployed to.
              image_id:
                type: string
                description: An identifier for the image used to create this container.
              stateful:
                type: boolean
                description: A boolean where true represents this container is stateful.
              config:
                $ref: '#/components/schemas/Config'
              volumes:
                $ref: '#/components/schemas/Volumes'
              annotations:
                type: object
                description: User defined meta data for the container.
                additionalProperties:
                  type: string
    CreateEnvironmentBody:
      description: Parameters for creating a new environment.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - cluster
              - about
              - features
              - stack
            properties:
              name:
                type: string
                description: A user defined name for the environment resource.
              cluster:
                type: string
                description: The cluster this environment is associated with.
              about:
                type: object
                description: Contains details regarding the environment.
                required:
                  - description
                properties:
                  description:
                    type: string
                    description: A custom description for this environment.
              features:
                $ref: '#/components/schemas/Features'
              stack:
                type: object
                nullable: true
                description: An object representing the associated stack.
                required:
                  - id
                  - build_id
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  build_id:
                    $ref: '#/components/schemas/ID'
    CreateHubInviteRequest:
      description: Parameters for creating a hub invite.
      content:
        application/json:
          schema:
            type: object
            properties:
              recipient:
                type: string
                description: The email address of the invitee.
              role:
                type: string
                description: The account role.
                enum:
                  - owner
                  - admin
                  - developer
                  - analyst
    CreateHubRequest:
      description: Parameters for creating a hub.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the hub.
              integrations:
                $ref: '#/components/schemas/HubIntegrations'
              webhooks:
                type: object
                description: All hub webhooks for the given hub.
                required:
                  - server_deployed
                properties:
                  server_deployed:
                    nullable: true
                    type: string
                    description: A webhook to report information to each time a server is deployed on the given hub.
    CreatePipelineRequest:
      description: Parameters for creating a new pipeline.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: A name for the pipeline.
              stages:
                description: An array of stages.
                type: array
                items:
                  $ref: '#/components/schemas/PipelineStage'
              disable:
                type: boolean
                description: A boolean where true signifies the pipeline is disabled.
    CreateProviderRequest:
      description: Parameters for creating a provider.
      content:
        application/json:
          schema:
            type: object
            required:
              - integration
            properties:
              integration:
                type: object
                description: An integration object defining the provider integration assets and endpoints.
                properties:
                  native:
                    type: object
                    description: Nativly supported IAL provider integration.
                    required:
                      - identifier
                      - auth
                    properties:
                      identifier:
                        type: string
                        description: An identifier for the provider.
                      auth:
                        $ref: '#/components/schemas/IALAuth'
                  abstraction:
                    type: object
                    description: Custom provider information.
                    required:
                      - name
                      - base_url
                    properties:
                      name:
                        type: string
                        description: A name for the custom provider abstraction.
                      base_url:
                        type: string
                        description: The url to use when making calls to the abstraction for provision events.
                      auth:
                        $ref: '#/components/schemas/IALAuth'
    CreateRecordRequest:
      description: Parameters for creating a new DNS record.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - name
            properties:
              type:
                $ref: '#/components/schemas/RecordTypes'
              name:
                type: string
                description: A name for the given record where `@` represents the desire to use the root of the origin.
    CreateSDNRequest:
      description: Parameters for creating a new network.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - identifier
              - cluster
              - environments
            properties:
              name:
                type: string
                description: The name of the network.
              identifier:
                type: string
                description: A network identifier used to construct http calls that specifically use this network over another.
              cluster:
                type: string
                description: The infrastructure cluster the environments belonging to this network belong to.
              environments:
                description: An array of environments and timestamps.
                type: array
                items:
                  type: object
                  required:
                    - id
                    - added
                  properties:
                    id:
                      $ref: '#/components/schemas/ID'
                    added:
                      description: A timestamp of when the environment was added.
                      $ref: '#/components/schemas/DateTime'
    CreateServerRequest:
      description: Parameters for creating a server.
      content:
        application/json:
          schema:
            type: object
            required:
              - servers
              - cluster
            properties:
              servers:
                description: An array of servers to provision.
                type: array
                items:
                  type: object
                  required:
                    - provider
                    - model_id
                    - location_id
                    - quantity
                  properties:
                    provider:
                      type: string
                      description: The provider this server is from.
                    model_id:
                      type: string
                      description: The model ID of the server.
                    location_id:
                      type: string
                      description: The location ID of the server.
                    quantity:
                      type: integer
                      description: The number of this server at this location to deploy.
                    hostnames:
                      description: An array of hostnames for the given servers.
                      type: array
                      items:
                        type: string
                    cluster:
                      type: string
                      description: The existing or new cluster this infrastructure should be provisioned in.
    CreateStackBuildRequest:
      description: Parameters for creating a new stack build.
      content:
        application/json:
          schema:
            type: object
            properties:
              about:
                type: object
                description: Information about the stack build.
                required:
                  - version
                  - description
                properties:
                  version:
                    type: string
                    description: A user defined version of the build.
                  description:
                    type: string
                    description: A user defined description for the build.
                  git_commit:
                    $ref: '#/components/schemas/StackGitCommit'
              instructions:
                type: object
                description: Git information on where to pull stack resources from.
                properties:
                  git:
                    type: object
                    description: Git information specifics.
                    required:
                      - type
                      - value
                    properties:
                      type:
                        type: string
                        description: The type of information the user is passing.
                        enum:
                          - hash
                          - tag
                      value:
                        type: string
                        description: The actual value to be passed.
    CreateStackRequest:
      description: Parameters for creating a new stack.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - source
            properties:
              name:
                type: string
                description: A name for the stack.
              source:
                $ref: '#/components/schemas/StackSource'
    CreateTriggerKeyRequest:
      description: Parameters for creating a new pipeline trigger key.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the trigger key.
              ips:
                description: An array of ips this trigger key is usable from.
                type: array
                items:
                  type: string
    CreateZoneRequest:
      description: Parameters for creating a new DNS zone.
      content:
        application/json:
          schema:
            type: object
            required:
              - hosted
              - origin
            properties:
              hosted:
                type: boolean
                description: A boolean where true represents the desire for the origin to be of the type `hosted`.
              origin:
                type: string
                description: The origin that will be created.
    DiscoveryReconfigure:
      description: Parameters for reconfiguring a discovery service.
      content:
        application/json:
          schema:
            type: object
            required:
              - action
              - contents
            properties:
              action:
                type: string
                enum:
                  - reconfigure
                description: The name of the action to perform.
              contents:
                type: object
                properties:
                  high_availability:
                    type: boolean
                    description: A boolean where `true` represents the desire to run the environment discovery service in high availability mode.
    ImageCreateRequest:
      description: Parameters for creating a new image.
      content:
        application/json:
          schema:
            type: object
            required:
              - source_id
            properties:
              name:
                type: string
                description: A name for the image.
              source_id:
                type: string
                description: The ID for the image source to be used.
              override:
                type: object
                description: An override object to be used for a single image create request.
                required:
                  - target
                properties:
                  target:
                    type: string
                    description: A target to be used for overridding the default target.
    ImageUpdateRequest:
      description: Parameters for creating a new image.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the image.
    InstanceCreate:
      description: Parameters for creating a container instance.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - server_id
                - new_instances
              properties:
                server_id:
                  type: string
                  description: The ID of the server the new instance(s) should be deployed to.
                new_instances:
                  type: integer
                  description: The number of new instances to be created on the given server.
    LoadBalancerReconfigure:
      description: Parameters for reconfiguring a load balancer.
      content:
        application/json:
          schema:
            type: object
            required:
              - action
              - contents
            properties:
              action:
                type: string
                enum:
                  - reconfigure
                description: The name of the action to perform.
              contents:
                type: object
                properties:
                  config:
                    type: object
                    description: An optional load balancer configuration.
                    properties:
                      haproxy:
                        $ref: '#/components/schemas/HAProxyConfig'
                      ipv4:
                        type: boolean
                        description: A boolean where `true` represents the desire for a IPv4 address(s) to be assigned to the environment load balancer(s).
                      ipv6:
                        type: boolean
                        description: A boolean where `true` represents the desire for a IPv6 address(s) to be assigned to the environment load balancer(s).
                  high_availability:
                    type: boolean
                    description: A boolean where `true` represents the desire to run the environment load balancer service in high availability mode.
    SourceCreateRequest:
      description: Parameters for creating an image source.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - origin
            properties:
              name:
                type: string
                description: A name for the image source.
              type:
                type: string
                description: A value identifiying the type of image.
                enum:
                  - stack_build
                  - direct
              origin:
                type: object
                description: The origin of the given image source.
                oneOf:
                  - $ref: '#/components/schemas/DockerHubSource'
                  - $ref: '#/components/schemas/DockerfileRepoSource'
                  - $ref: '#/components/schemas/DockerfileTarSource'
                  - $ref: '#/components/schemas/DockerRegistrySource'
              about:
                type: object
                description: User defined information about the image source.
                required:
                  - description
                properties:
                  description:
                    type: string
                    nullable: true
                    description: A description of the image source.
    SourceUpdateRequest:
      description: Parameters for updating an image source.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the image source.
              origin:
                type: object
                description: The origin of the given image source.
                oneOf:
                  - $ref: '#/components/schemas/DockerHubSource'
                  - $ref: '#/components/schemas/DockerfileRepoSource'
                  - $ref: '#/components/schemas/DockerfileTarSource'
                  - $ref: '#/components/schemas/DockerRegistrySource'
              about:
                type: object
                description: User defined information about the image source.
                required:
                  - description
                properties:
                  description:
                    type: string
                    nullable: true
                    description: A description of the image source.
    UpdateAPIKeyRequest:
      description: Parameters for updating an API Key.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name given to the API Key.
              permissions:
                $ref: '#/components/schemas/Permissions'
              capabilities:
                $ref: '#/components/schemas/Capabilities'
              ips:
                type: array
                nullable: true
                description: An array of approved IPs from which this API Key can be used.
                items:
                  type: string
    UpdateContainer:
      description: Parameters for updating a container.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name for the container.
              annotation:
                type: object
                description: User meta data for the container.
                additionalProperties:
                  type: string
    UpdateDNSRecordRequest:
      description: Parameters for updateing a DNS record. The name value cannot be updated and is ommitted from the properties.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
            properties:
              type:
                $ref: '#/components/schemas/RecordTypes'
    UpdateEnvironmentBody:
      description: Parameters for updating an environment.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              about:
                $ref: '#/components/schemas/About'
    UpdateHubMemberRequest:
      description: Parameters for updating a hub membership.
      content:
        application/json:
          schema:
            type: object
            properties:
              role:
                type: string
                description: The account role.
                enum:
                  - owner
                  - admin
                  - developer
                  - analyst
              permissions:
                $ref: '#/components/schemas/Permissions'
    UpdateHubRequest:
      description: Parameters for updating a hub.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the hub.
              integrations:
                $ref: '#/components/schemas/HubIntegrations'
              webhooks:
                type: object
                description: All hub webhooks for the given hub.
                required:
                  - server_deployed
                properties:
                  server_deployed:
                    nullable: true
                    type: string
                    description: A webhook to report information to each time a server is deployed on the given hub.
    UpdatePipelineRequest:
      description: Parameters for updating a pipeline.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the pipeline.
              stages:
                description: An array of stages.
                type: array
                items:
                  $ref: '#/components/schemas/PipelineStage'
              disable:
                type: boolean
                description: A boolean where true signifies the pipeline is disabled.
    UpdateProviderRequest:
      description: Parameters for updating a provider.
      content:
        application/json:
          schema:
            type: object
            required:
              - integration
            properties:
              integration:
                type: object
                description: An integration object defining the provider integration assets and endpoints.
                properties:
                  native:
                    type: object
                    description: Nativly supported IAL provider integration.
                    required:
                      - identifier
                      - auth
                    properties:
                      identifier:
                        type: string
                        description: An identifier for the provider.
                      auth:
                        $ref: '#/components/schemas/IALAuth'
                  abstraction:
                    type: object
                    description: Custom provider information.
                    required:
                      - name
                      - base_url
                    properties:
                      name:
                        type: string
                        description: A name for the custom provider abstraction.
                      base_url:
                        type: string
                        description: The url to use when making calls to the abstraction for provision events.
                      auth:
                        $ref: '#/components/schemas/IALAuth'
    UpdateSDNRequest:
      description: Parameters for updating a network.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The name of the network.
              identifier:
                type: string
                description: A network identifier used to construct http calls that specifically use this network over another.
    UpdateServerRequest:
      description: Parameters for updating a server.
      content:
        application/json:
          schema:
            type: object
            required:
              - constraints
            properties:
              constraints:
                type: object
                description: Server constriants.
                properties:
                  tags:
                    description: A list of server tags.
                    type: array
                    items:
                      type: string
                  allow:
                    type: object
                    description: Server constraints for the given server.
                    required:
                      - pool
                      - services
                      - overcommit
                    properties:
                      pool:
                        type: boolean
                        description: A boolean where true represents the server can accept containers with no tags set.
                      services:
                        type: boolean
                        description: A boolean where true represents the server being a target for service containers.
                      overcommit:
                        type: boolean
                        description: A boolean where true represents the desire for the server to allow the overcommitting of shares.
    UpdateStackRequest:
      description: Parameters for updating a stack.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: A name for the stack.
              source:
                $ref: '#/components/schemas/StackSource'
    UpdateZoneRequest:
      description: Parameters for updating a DNS Zone.
      content:
        application/json:
          schema:
            type: object
            required:
              - hosted
            properties:
              hosted:
                type: boolean
                description: A boolean where true represents the desire for the origin to be of the type `hosted`.
    VPNReconfigure:
      description: An object to be submitted when reconfiguring a VPN service.
      content:
        application/json:
          schema:
            type: object
            properties:
              enable:
                type: boolean
                description: A boolean where true means the VPN service is enabled.
              config:
                type: object
                nullable: true
                description: 'The config object for the VPN service, in this case without the required fields normally found in a VPN config object.'
                properties:
                  allow_internet:
                    type: boolean
                    description: 'If true, routes all traffic through the VPN, even non-Cycle traffic.'
                  auth:
                    type: object
                    description: Auth configuration for the VPN.
                    required:
                      - webhook
                      - cycle_accounts
                    properties:
                      webhook:
                        type: string
                        nullable: true
                        description: 'A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.'
                      cycle_accounts:
                        type: boolean
                        description: 'If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.'
                      vpn_accounts:
                        type: boolean
                        description: 'If true, allows the custom VPN accounts to log in to the VPN.'
    VPNUserCreate:
      description: Parameters for creating a new VPN user.
      content:
        application/json:
          schema:
            type: object
            required:
              - value
            properties:
              value:
                $ref: '#/components/schemas/VPNUsers'
  schemas:
    APIKey:
      title: APIKey
      description: An API key resource
      type: object
      required:
        - id
        - hub_id
        - name
        - creator
        - secret
        - permissions
        - capabilities
        - ips
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A name for the API key.
        creator:
          $ref: '#/components/schemas/Creator'
        secret:
          type: string
          description: The API key secret.
        permissions:
          type: object
          description: Information about this members permissions for a given resource.
          required:
            - all_environments
            - environments
          properties:
            all_environments:
              type: boolean
              description: A boolean where true represents the member has access to view and manage all environments for the resource.
            environments:
              description: An array of environments this resource has access to.
              type: array
              items:
                type: object
                description: Environment resource resources.
                required:
                  - id
                  - manage
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  manage:
                    type: boolean
                    description: A boolean where true represents this environment can be managed by the resource (i.e. its not just read-only).
        capabilities:
          type: object
          description: An object holding information about the capabilities of this API key.
          required:
            - all
            - specific
          properties:
            all:
              type: boolean
              description: A boolean where true represents this key has all available capabilities.
            specific:
              description: An array a capabilities this key has.
              type: array
              items:
                $ref: '#/components/schemas/Capabilities'
        ips:
          type: array
          description: An array of IP's this API key can make calls from.
          items:
            type: string
          nullable: true
        state:
          $ref: '#/components/schemas/APIKeyState'
        events:
          title: HubEvents
          type: object
          description: A collection of timestamps for each event in the hub's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the hub was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the hub was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the hub was deleted.
              $ref: '#/components/schemas/DateTime'
    APIKeyState:
      title: APIKeyState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the API key.
              type: string
              enum:
                - new
                - configuring
                - live
                - inactive
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    About:
      title: About
      type: object
      description: Contains details regarding the environment.
      required:
        - description
        - favorite
      properties:
        description:
          type: string
          description: A custom description for this environment.
        favorite:
          type: boolean
          description: 'If true, this environment has been marked as a favorite.'
    Abstraction:
      title: InfrastructureProviderAbstraction
      description: Information about an infrastructure provider abstraction.
      type: object
      required:
        - name
        - base_url
      properties:
        name:
          type: string
          description: A name for a given infrastructure abstraction.
        base_url:
          type: string
          description: 'The base url, where the abstraction endpoints are located.'
        auth:
          $ref: '#/components/schemas/IALAuth'
    Account:
      title: Account
      type: object
      description: An object representing information about the currently logged-in user.
      required:
        - id
        - name
        - email
        - allow_support_logins
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: object
          description: The first and last name associated with the account.
          required:
            - first
            - last
          properties:
            first:
              type: string
              description: The first name of the account owner.
            last:
              type: string
              description: The last name of the account owner.
        email:
          type: object
          description: Information about the email address associated with the account.
          required:
            - address
            - verified
            - added
          properties:
            address:
              type: string
              description: The email address.
            verified:
              type: boolean
              description: 'If true, the email has been verified and the account is active.'
            added:
              description: The date the email was added to the account
              $ref: '#/components/schemas/DateTime'
        two_factor_auth:
          type: object
          nullable: true
          description: Two factor auth verification information.
          required:
            - verified
          properties:
            verified:
              type: boolean
              description: A boolean representing if the account has verified with TwoFA.
        allow_support_login:
          description: Indicates whether or not Cycle employees have authorization to log in to this account in a support capacity.
          type: boolean
        state:
          $ref: '#/components/schemas/AccountState'
        events:
          title: AccountEvents
          type: object
          description: A collection of timestamps for each event in the account's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_login
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
            last_login:
              description: The timestamp of when the account was last accessed.
              $ref: '#/components/schemas/DateTime'
    AccountInfo:
      title: AccountInfo
      type: object
      description: Information about a given account.
      required:
        - id
        - ip
      properties:
        id:
          $ref: '#/components/schemas/ID'
        ip:
          type: string
          description: The IP of the computer used during login.
    AccountState:
      title: AccountState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the account.
              type: string
              enum:
                - new
                - live
                - suspending
                - purging
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Activity:
      title: Activity
      type: object
      description: An resource representing information about activity taking place on a given hub.
      required:
        - id
        - hub_id
        - user
        - verbosity
        - context
        - session
        - changes
        - annotations
        - error
        - component
        - status
        - event
        - time
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        user:
          type: object
          description: Userscope
          required:
            - type
            - id
          properties:
            type:
              type: string
              description: The type of user.
              enum:
                - account
                - environment
                - platform
                - platform-pipeline
                - employee
                - api-key
                - visitor
            id:
              type: string
              description: The given users ID.
        verbosity:
          type: integer
          description: A number representing how verbose the acitivty reporting is for a given hub.
        context:
          $ref: '#/components/schemas/Context'
        session:
          $ref: '#/components/schemas/Session'
        changes:
          type: array
          description: An array of changes.
          items:
            $ref: '#/components/schemas/Change'
        annotations:
          type: object
          description: A record of additional annotations for the activity.
          additionalProperties:
            type: string
        error:
          type: object
          description: An object describing a given activity error.
          nullable: true
          required:
            - message
          properties:
            message:
              type: string
              description: The error message.
        component:
          type: object
          description: An object holding information about a component.
          nullable: true
          required:
            - id
            - type
          properties:
            id:
              $ref: '#/components/schemas/ID'
            type:
              type: string
              description: The type of component.
        status:
          type: string
          description: A status for the given activity.
          enum:
            - info
            - warning
            - request
            - success
            - error
        event:
          type: string
          description: The activity event.
          enum:
            - hub.task.delete
            - hub.update
            - hub.create
            - hub.images.prune
            - hub.task.images.prune
            - environment.initialize
            - environment.start
            - environment.stop
            - environment.task.start
            - environment.task.stop
            - environment.task.initialize
            - environment.delete
            - environment.task.delete
            - environment.update
            - environment.create
            - environment.services.discovery.task.reconfigure
            - environment.services.lb.task.reconfigure
            - environment.services.vpn.task.reconfigure
            - image.import
            - image.task.import
            - image.update
            - image.create
            - image.delete
            - image.task.delete
            - image.source.create
            - image.source.update
            - image.source.task.delete
            - container.create
            - container.update
            - container.initialize
            - container.start
            - container.task.start
            - container.stop
            - container.task.stop
            - container.reconfigure
            - container.task.reconfigure
            - container.reconfigure.volumes
            - container.task.reconfigure.volumes
            - container.reimage
            - container.task.reimage
            - container.scale
            - container.task.scale
            - container.delete
            - container.task.delete
            - container.instance.error
            - container.instance.sftp.login
            - container.instance.migration.start
            - container.instance.migration.revert
            - container.instance.delete
            - container.instances.delete
            - container.instances.create
            - container.instance.healthcheck.restarted
            - container.backup.create
            - container.backup.restore
            - container.backup.task.restore
            - container.backup.delete
            - container.backup.task.delete
            - dns.zone.task.verify
            - dns.zone.task.delete
            - dns.zone.update
            - dns.zone.create
            - dns.zone.verify
            - dns.zone.delete
            - dns.zone.record.cert.generate.auto
            - dns.zone.record.cert.generate
            - dns.zone.record.delete
            - dns.zone.record.update
            - dns.zone.record.create
            - dns.zone.record.task.delete
            - dns.zone.record.task.cert.generate
            - stack.task.delete
            - stack.update
            - stack.create
            - stack.task.prune
            - stack.build.create
            - stack.build.generate
            - stack.build.deploy
            - stack.build.delete
            - stack.build.task.generate
            - stack.build.task.delete
            - infrastructure.server.task.delete
            - infrastructure.server.task.restart
            - infrastructure.server.task.provision
            - infrastructure.server.update
            - infrastructure.server.delete
            - infrastructure.server.restart
            - infrastructure.server.compute.restart
            - infrastructure.server.provision
            - infrastructure.server.live
            - infrastructure.server.services.sftp.lockdown.auto
            - infrastructure.server.reconfigure.features
            - infrastructure.server.task.reconfigure.features
            - infrastructure.provider.create
            - infrastructure.provider.update
            - infrastructure.provider.delete
            - sdn.network.task.delete
            - sdn.network.update
            - sdn.network.create
            - sdn.network.task.reconfigure
            - infrastructure.ips.pool.task.delete
            - billing.order.task.confirm
            - billing.order.confirm
            - billing.invoice.task.void
            - billing.invoice.task.credit
            - billing.invoice.task.refund
            - billing.invoice.task.pay
            - billing.invoice.pay
            - billing.method.update
            - billing.method.create
            - billing.method.delete
            - billing.method.task.delete
            - hub.apikey.create
            - hub.apikey.update
            - hub.apikey.delete
            - hub.membership.create
            - hub.membership.delete
            - pipeline.update
            - pipeline.task.delete
            - pipeline.delete
            - pipeline.create
            - pipeline.task.trigger
            - pipeline.trigger
            - pipeline.key.update
            - pipeline.key.delete
            - pipeline.key.create
        time:
          description: A timestamp for when the activity took place.
          $ref: '#/components/schemas/DateTime'
    ActivityIncludes:
      title: ActivityIncludes
      description: All includable resources linkable to the given records.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        components:
          $ref: '#/components/schemas/ComponentsIncludes'
    ApiKey:
      title: ApiKey
      description: An extended resource that has information on a Cycle hub API key
      type: object
      required:
        - id
        - name
        - creator
        - hub_id
        - permissions
        - capabilities
        - ips
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the API key
        hub_id:
          $ref: '#/components/schemas/ID'
        secret:
          type: string
          description: The API key secret
        permissions:
          $ref: '#/components/schemas/Permissions'
        capabilities:
          type: object
          description: The API key capabilities list
          required:
            - all
            - specific
          properties:
            all:
              type: boolean
            specific:
              type: array
              items:
                type: string
        ips:
          type: array
          nullable: true
          items:
            type: string
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  type: string
                  enum:
                    - live
                    - deleting
                    - deleted
            - $ref: '#/components/schemas/State'
        events:
          $ref: '#/components/schemas/Events'
    Attempt:
      title: DNSTLSAttempt
      type: object
      description: A DNS TLS certificate generation attempt resource.
      required:
        - id
        - hub_id
        - domains
        - time
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        domains:
          description: A list of domains associated with the attempt.
          type: array
          items:
            type: string
        time:
          description: A timestamp for when the attempt took place.
          $ref: '#/components/schemas/DateTime'
        success:
          description: A boolean where true means the attept was successful at creating the TLS certificate.
          type: boolean
        error:
          type: string
          description: If success is false this property will be populated with an error.
    Backup:
      title: Backup
      type: object
      description: A container backup resource.
      required:
        - id
        - hub_id
        - container_id
        - instance_id
        - target
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: The ID of the given container.
        instance_id:
          type: string
          description: The ID of the instance the backup belongs to.
        target:
          $ref: '#/components/schemas/Target'
        state:
          $ref: '#/components/schemas/BackupState'
        events:
          title: BackupEvents
          type: object
          description: A collection of timestamps for each event in the backup's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the backup was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the backup was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the backup was deleted.
              $ref: '#/components/schemas/DateTime'
    BackupState:
      title: BackupState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the backup.
              type: string
              enum:
                - saving
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    BillingAmount:
      title: BillingAmount
      type: object
      description: An object holding information about term and amount that relates to a specific billing component.
      required:
        - mills
        - term
      properties:
        mills:
          type: integer
          description: 1/10th of a cent.
        term:
          type: string
          description: The length of the term.
          enum:
            - once
            - monthly
            - yearly
    BillingProfile:
      title: HubBillingProfile
      type: object
      description: A billing profile for a given hub.
      required:
        - term
        - plans
      properties:
        term:
          $ref: '#/components/schemas/Term'
        allow_prepaid:
          type: boolean
          description: A boolean where true represents this account being approved to use a prepaid card for billing transactions.
        disable:
          type: boolean
          description: A boolean where true means this billing profile is disabled.
        plans:
          type: object
          description: Information about the plan associated with this profile.
          required:
            - tier_id
            - support_id
          properties:
            tier_id:
              type: string
              description: An ID that maps to a type of hub tier.
            support_id:
              type: string
              description: An ID that maps to the type of support for a given billing profile.
    BuildLog:
      title: ImageBuildLog
      description: A build log for a given image.
      type: object
      required:
        - id
        - image_id
        - hub_id
        - log
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        image_id:
          type: string
          description: The ID of the image the build log pertains to.
        log:
          type: string
          description: The log itself.
        events:
          title: BuildLogEvents
          type: object
          description: A collection of timestamps for each event in the build log's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the build log was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the build log was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the build log was deleted.
              $ref: '#/components/schemas/DateTime'
    CPU:
      title: ServerStatsCPU
      type: object
      description: Statistics about the CPU resources on a server.
      properties:
        cores:
          type: integer
          description: The number of CPU's or vCPU's for a given server.
        processors:
          description: An array of processor information objects.
          type: array
          items:
            type: object
            description: Processor information.
            properties:
              model:
                type: string
                description: The model of the processor.
              speed:
                type: integer
                description: The speed of the processor.
    CPUSnapshot:
      title: InstanceTelemetryCPUSnapshot
      type: object
      description: A telemetry snapshot pertaining to CPU usage.
      required:
        - usage
        - throttling
      properties:
        usage:
          type: object
          description: Usage statistics.
          required:
            - total
            - per_core
            - kernel
            - user
          properties:
            total:
              type: integer
              description: Total amount of VPU time since last restart.
            per_core:
              description: An array showing CPU core specific usage in nanoseconds since the last restart.
              type: array
              items:
                type: integer
            kernel:
              type: integer
              description: The amount of time in nanoseconds used by the kernel since last restart.
            user:
              type: number
              description: The amount of time in nanoseconds taken up for user processes.
        throttling:
          type: object
          description: Throttling statistics.
          properties:
            periods:
              type: integer
              description: The amount of periods that have passed since the last restart.
            throttled_periods:
              type: integer
              description: How many times the instance has been throttled for using all its alloted CPU during a period.
            throttled_time:
              type: integer
              description: The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
    CPUSpec:
      title: CPUServerSpec
      type: object
      description: Information about the CPU for a given server.
      required:
        - count
        - type
      properties:
        count:
          type: integer
          description: The number of CPUs.
        cores:
          type: integer
          description: The number of cores.
        threads:
          type: integer
          description: The number of threads.
        type:
          type: string
          description: The type of the CPU.
        shared:
          type: boolean
          description: A boolean where true represents the CPU is shared.
        extra:
          type: object
          description: Extra information about the CPU if there is any.
          additionalProperties:
            type: string
    Capabilities:
      type: string
      description: A capability that a user or API key that represents what an API key or a user can do.
      enum:
        - hubs-update
        - hubs-delete
        - hubs-invites-send
        - hubs-invites-manage
        - hubs-members-manage
        - hubs-members-view
        - hubs-notifications-listen
        - billing-methods-manage
        - billing-invoices-view
        - billing-invoices-pay
        - billing-orders-manage
        - billing-services-view
        - billing-credits-view
        - sdn-networks-view
        - sdn-networks-manage
        - pipelines-manage
        - pipelines-view
        - pipelines-trigger
        - environments-create
        - environments-delete
        - environments-view
        - environments-update
        - environments-state
        - environments-services-manage
        - environments-vpn
        - environments-vpn-manage
        - containers-deploy
        - containers-view
        - containers-console
        - containers-ssh
        - containers-update
        - containers-delete
        - containers-state
        - containers-volumes-manage
        - containers-volumes-view
        - containers-instances-migrate
        - containers-backups-manage
        - containers-backups-view
        - stacks-manage
        - stacks-view
        - stacks-builds-manage
        - stacks-builds-deploy
        - images-view
        - images-import
        - images-update
        - images-delete
        - images-build
        - images-sources-view
        - images-sources-manage
        - jobs-view
        - api-keys-manage
        - ips-manage
        - servers-provision
        - servers-view
        - servers-update
        - servers-login
        - servers-state
        - servers-decommission
        - infrastructure-providers-manage
        - infrastructure-providers-view
        - usage-view
        - dns-view
        - dns-manage"
    Certificate:
      title: DNSRecordCertificate
      type: object
      description: A TLS record certificate
      required:
        - id
        - generated
        - wildcard_child
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/ID'
        generated:
          $ref: '#/components/schemas/DateTime'
        wildcard_child:
          type: boolean
          description: A value where true represents that the certificate is using a shared wildcard cert.
    Change:
      title: ActivityChange
      type: object
      description: An object with information of details for before and after a resource changed.
      required:
        - component
      properties:
        component:
          type: string
          description: A description of the resource that was changed.
        before:
          $ref: '#/components/schemas/Detail'
        after:
          $ref: '#/components/schemas/Detail'
    ComponentsIncludes:
      title: ComponentIncludes
      type: object
      description: A resource thats assocaited with activity.
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/Container'
          - $ref: '#/components/schemas/Instance'
          - $ref: '#/components/schemas/Environment'
          - $ref: '#/components/schemas/Image'
          - $ref: '#/components/schemas/Server'
          - $ref: '#/components/schemas/Pool'
          - $ref: '#/components/schemas/Stack'
          - $ref: '#/components/schemas/StackBuild'
          - $ref: '#/components/schemas/Zone'
          - $ref: '#/components/schemas/Record'
          - $ref: '#/components/schemas/APIKey'
          - $ref: '#/components/schemas/Provider'
          - $ref: '#/components/schemas/SDNNetwork'
          - $ref: '#/components/schemas/HubMembership'
          - $ref: '#/components/schemas/Pipeline'
          - $ref: '#/components/schemas/TriggerKey'
    Config:
      title: ContainerConfig
      description: A container configuration.
      type: object
      required:
        - network
        - deploy
      properties:
        network:
          $ref: '#/components/schemas/ContainerNetwork'
        deploy:
          $ref: '#/components/schemas/_deploy'
        runtime:
          $ref: '#/components/schemas/Runtime'
        resources:
          $ref: '#/components/schemas/Resources'
        integrations:
          $ref: '#/components/schemas/ContainerIntegrations'
    Container:
      title: Container
      type: object
      description: 'Containers are a way to package together your application along with it''s dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).'
      required:
        - id
        - name
        - identifier
        - creator
        - environment
        - hub_id
        - image
        - config
        - instances
        - annotations
        - stateful
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the container resource.
        identifier:
          type: string
          description: A human readable slugged identifier for this container. Usually used as a key in a stack file.
        creator:
          $ref: '#/components/schemas/Creator'
        environment:
          $ref: '#/components/schemas/ContainerEnvironmentSummary'
        hub_id:
          $ref: '#/components/schemas/HubID'
        image:
          $ref: '#/components/schemas/ImageSummary'
        stack:
          $ref: '#/components/schemas/StackSummary'
        config:
          $ref: '#/components/schemas/Config'
        instances:
          type: integer
          description: The number of instances for a given container.
        volumes:
          $ref: '#/components/schemas/VolumeSummary'
        annotations:
          type: object
          description: Custom meta data for a given container
          nullable: true
          additionalProperties:
            type: string
        role:
          type: string
          description: The role of a given container if it has one.
          enum:
            - orchestrator
          nullable: true
        stateful:
          type: boolean
          description: A boolean where true signifies the container is stateful.
        deprecate:
          type: boolean
          description: A boolean where true signifies the container is marked as deprecated.
        state:
          $ref: '#/components/schemas/ContainerState'
        events:
          title: ContainerEvents
          type: object
          description: A collection of timestamps for each event in the container's lifetime.
          required:
            - created
            - updated
            - deleted
            - started
          properties:
            created:
              description: The timestamp of when the container was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the container was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the container was deleted.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the container was started.
              $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ContainersMeta'
    ContainerAction:
      title: ContainerActionTask
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - start
            - stop
            - delete
      description: The name of the action to perform.
    ContainerEnvironmentSummary:
      title: ContainerEnvironmentSummary
      description: A summary of supplemental environment and network information specific to a container.
      type: object
      required:
        - id
        - cluster
        - container_subnet
        - ipv6
        - legacy
      properties:
        id:
          $ref: '#/components/schemas/ID'
        cluster:
          type: string
          description: The cluster this environment is associated with.
        container_subnet:
          type: string
          description: The private network subnet ID for this container and its instances.
        ipv6:
          allOf:
            - description: The IPv6 interface.
            - $ref: '#/components/schemas/IPNet'
        legacy:
          $ref: '#/components/schemas/LegacyNetwork'
    ContainerImageSummary:
      title: ContainerImageSummary
      description: The Id of the image and information on if it is a service.
      type: object
      required:
        - id
        - service
      properties:
        id:
          $ref: '#/components/schemas/ID'
        service:
          type: string
          nullable: true
          description: If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
          enum:
            - discovery
            - loadbalancer
            - vpn
    ContainerIncludes:
      title: ContainerIncludes
      description: All includable resources linkable to the given container.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        images:
          $ref: '#/components/schemas/ImagesIncludes'
        stack_builds:
          $ref: '#/components/schemas/StackBuildIncludes'
        stacks:
          $ref: '#/components/schemas/StackIncludes'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    ContainerIntegrations:
      title: ContainerIntegrations
      type: object
      description: Configuration settings for integrations with a given container.
      properties:
        webhooks:
          type: object
          description: Webhooks that can be set for specific event reporting and advanced container configurations.
          properties:
            events:
              type: object
              description: Container events that can be configured to report to a webhook.
              properties:
                deploy:
                  type: string
                  description: A webhook to hit when a container deploy event happens.
                start:
                  type: string
                  description: A webhook to hit when a container start event happens.
                stop:
                  type: string
                  description: A webhook to hit when a container stop event happens.
            config:
              type: string
              description: 'An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations.'
        files:
          type: array
          description: Inject remotely hosted files into container instances at runtime.
          items:
            type: object
            description: These objects are sources and destinations for the given files.
            required:
              - source
              - destination
            properties:
              source:
                type: string
                description: The http endpoint that is hosting the files to be used.
              destination:
                type: string
                description: The path in the container for these files to be injected.
        lets_encrypt:
          type: object
          description: Configuration settings to embed a TLS certificate in the container.
          required:
            - enable
          properties:
            enable:
              type: boolean
              description: A boolean where true represents the desire for a container to have its corresponding TLS certificate(s) injected into the configured path(s).
            certificate_path:
              type: string
              description: Path where the `certificate.cert` will be saved.
            chain_path:
              type: string
              description: Path where the `certificate.chain` will be saved.
            key_path:
              type: string
              description: Path where the `certificate.key` will be saved.
            bundle_path:
              type: string
              description: Path where the `certificate.bundle` will be saved.
            additional_certs_path:
              type: string
              description: File path where any remaining certificate files will be stored.
        backups:
          type: object
          description: Automated backups configuration for the given container.
          required:
            - destination
            - backup
            - restore
          properties:
            destination:
              type: string
              description: The storage provider to use for backups.
              enum:
                - backblaze-b2
            backup:
              type: object
              description: Configuration settings for each backup.
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to run for the backup.
                timeout:
                  type: integer
                  description: The time in seconds for the backup to attempt to run before timing out.
                  nullable: true
                cron_string:
                  type: string
                  description: A cron string that configures how often the backup will run.
            restore:
              type: object
              description: Configuration settings for restoring from a backup.
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to run for restoring from a backup.
                timeout:
                  type: integer
                  nullable: true
                  description: The time in seconds for the restore to appempt to complete before timing out.
    ContainerNetwork:
      title: ContainerNetwork
      type: object
      description: Network configuration for a container.
      required:
        - public
        - hostname
      properties:
        public:
          type: string
          description: The public network settings for the given container
          enum:
            - public
            - egress-only
            - disable
        hostname:
          type: string
          description: The hostname for the given container.
        ports:
          type: array
          items:
            type: string
          description: An array of port mappings for the container.
    ContainerState:
      title: ContainerState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the container.
              type: string
              enum:
                - new
                - starting
                - running
                - stopping
                - stopped
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ContainerSummary:
      title: ContainerSummary
      type: object
      description: Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls.
      required:
        - id
        - name
        - state
        - image
        - environment
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the container resource.
        state:
          $ref: '#/components/schemas/ContainerState'
        image:
          $ref: '#/components/schemas/ContainerImageSummary'
        environment:
          $ref: '#/components/schemas/ContainerEnvironmentSummary'
    ContainersIncludes:
      title: ContainersIncludes
      type: object
      description: A resource thats associated with a contianer.
      additionalProperties:
        $ref: '#/components/schemas/Container'
    ContainersMeta:
      title: ContainersMeta
      type: object
      description: A list of meta fields that can be applied to a container.
      properties:
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
        domain:
          type: string
          description: 'The FQDN for this container, if there is one.'
        domains:
          type: array
          items:
            type: object
            description: Holds domain name and record mappings.
            required:
              - fqdn
              - record
            properties:
              fqdn:
                type: string
                description: The fully qualified domain name.
              record:
                $ref: '#/components/schemas/Record'
        ips:
          description: An array of IP resources.
          type: array
          items:
            $ref: '#/components/schemas/IP'
    Context:
      title: ActivityContext
      type: object
      description: ID context for resources associated with an activity.
      properties:
        environment_id:
          type: string
          description: An ID for the given resource.
        container_id:
          type: string
          description: An ID for the given resource.
        instance_id:
          type: string
          description: An ID for the given resource.
        server_id:
          type: string
          description: An ID for the given resource.
        stack_id:
          type: string
          description: An ID for the given resource.
        dns_zone_id:
          type: string
          description: An ID for the given resource.
    Creator:
      title: Creator
      description: A creator object. Describes who created the resource.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          type: string
          description: The type of creator.
          enum:
            - account
            - employee
            - api-key
            - visitor
            - environments
    CreatorInclude:
      title: CreatorInclude
      description: An identity that created a resource.
      type: object
      properties:
        accounts:
          type: object
          description: 'Included creators that are public accounts, keyed by ID.'
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        employees:
          type: object
          description: 'Included creators that are employees of Cycle, keyed by ID.'
          example: null
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        visitors:
          type: object
          description: 'Included creators that are not Cycle accounts, keyed by ID.'
          example: null
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        environments:
          type: object
          description: 'Included creators that are Cycle environments (usually automatically created resources), keyed by ID.'
          example: null
          additionalProperties:
            $ref: '#/components/schemas/Environment'
        api_keys:
          type: object
          description: 'Included creators that are Cycle API Keys, keyed by ID.'
          additionalProperties:
            $ref: '#/components/schemas/ApiKey'
    CredentialsHTTP:
      title: HTTPSourceCredentials
      type: object
      description: Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 'For authentication, the username.'
        password:
          type: string
          description: 'For authentication, the password.'
    CredentialsSSH:
      title: SSHSourceCredentials
      type: object
      description: Authentication credentials for the Dockerfile image source type when authenticating with SSH.
      required:
        - username
        - passphrase
        - private_key
      properties:
        username:
          type: string
          description: 'The username for the repo service, that is used to authenticate an ssh key.'
        passphrase:
          type: string
          description: The passphrase used for the key.
        private_key:
          type: string
          description: A pem encoded private key.
    DateTime:
      title: DateTime
      type: string
      format: date-time
      example: '2021-01-30T08:30:00Z'
    DeployStackBuildAction:
      title: DeployStackBuild
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action the job takes.
          enum:
            - deploy
        contents:
          type: object
          description: Additional information needed for the job.
          required:
            - environment_id
          properties:
            environment_id:
              type: string
              description: The ID for the environment this stack build will be deployed to.
            update:
              type: object
              description: Optional update object used to specify specific params to update from the stack build.
              required:
                - containers
              properties:
                containers:
                  type: object
                  description: A map of the container names to update within the environment.
                  additionalProperties:
                    $ref: '#/components/schemas/StackDeployContainersObject'
    DeployedVolume:
      title: DeployedVolume
      type: object
      description: A deployed volume resource.
      required:
        - server_id
        - container_id
        - container_volume_id
        - instance_id
        - hash
        - path
        - storage
        - last_updated
      properties:
        server_id:
          type: string
          description: The ID of the server the instance is deployed to.
        container_id:
          type: string
          description: The ID of the container the instance was created from.
        container_volume_id:
          type: string
          description: The ID for the volume withing the context of the container.
        instance_id:
          type: string
          description: The ID for the container instance this volume is attached to.
        hash:
          type: string
          description: A hash used as part of the identification mechanisms for the platform and API.
        path:
          type: string
          description: The path where the volume is mounted on the instnace filesystem.
        storage:
          type: object
          description: Storage information for the volume.
          required:
            - used
            - total
          properties:
            used:
              type: string
              description: 'The amount of volume storage used, in MB''s'
            total:
              type: string
              description: 'The total amount of volume storage available, in MB''s.'
    DeploymentStrat:
      title: DeploymentStrategies
      type: object
      description: Information about supported container deployment strategies.
      required:
        - name
        - disabled
        - description
      properties:
        name:
          type: string
          description: The name of the deployment strategy.
          enum:
            - First Available
            - Manual
            - Resource Density
            - High Availability
        disabled:
          type: boolean
          description: A boolean where true signifies a strategy is either not yet or no longer available.
        description:
          type: string
          description: A description for the deployment strategy.
    Detail:
      title: ActivityDetail
      type: object
      description: Details about a given event that is part of an activity.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        number:
          type: integer
          description: A number describing the amount of the resource that exists.
        string:
          type: string
          description: Additional information.
    DiscoveryEnvironmentService:
      title: DiscoveryEnvironmentService
      type: object
      nullable: true
      description: Information about the environments discovery service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the discovery service is enabled.
        container_id:
          type: string
          description: The ID of the discovery service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          description: The config object for the discovery service.
          properties: {}
    DockerHubSource:
      title: DockerHubSource
      type: object
      description: An image source origin that pulls from DockerHub.
      required:
        - target
      properties:
        target:
          type: string
          description: 'The DockerHub target string. ex - `mysql:5.7`'
        username:
          type: string
          description: 'For authentication, a username.'
        token:
          type: string
          description: 'For authentication, a token.'
    DockerRegistrySource:
      title: DockerRegistrySource
      type: object
      description: An image source origin that pulls from a private Docker registry.
      required:
        - target
        - url
      properties:
        target:
          type: string
          description: The image name on the registry.
        url:
          type: string
          description: The url of the remote registry.
        username:
          type: string
          description: 'For authentication, a username.'
        password:
          type: string
          description: 'For authentication, a password.'
    DockerfileCredentials:
      title: DockerfileCredentails
      description: An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
      type: array
      items:
        type: object
        description: Credentials object used for authentication of indirect resources such as private parent images.
        properties:
          url:
            type: string
            description: The url the resource is located at.
          username:
            type: string
            description: A username for authentication.
          token:
            type: string
            description: A token for authentication.
    DockerfileRepoSource:
      title: DockerfileRepoSource
      type: object
      description: An image source origin that creates an image from a Dockerfile that's listed in a repository.
      properties:
        repo:
          $ref: '#/components/schemas/RepoType'
        context_dir:
          type: string
          description: The path to the directory to use as the context when building the image.
        build_file:
          type: string
          description: The path to the Dockerfile to be used for buiding the image.
        credentials:
          $ref: '#/components/schemas/DockerfileCredentials'
    DockerfileTarSource:
      title: DockerfileTarSource
      type: object
      description: An image source origin that creates an image from a Dockerfile that's listed at and endpoint and served as a `tar.gz` file.
      properties:
        targz_url:
          type: string
          description: An endpoint that serves the tar file.
        context_dir:
          type: string
          description: The path to the directory to use as the context when building the image.
        build_file:
          type: string
          description: The path to the Dockerfile to be used for buiding the image.
        credentials:
          $ref: '#/components/schemas/DockerfileCredentials'
    EmployeeLogin:
      title: AccountEmployeeLogin
      type: object
      description: A login event where the authentication mechanism was an employee login.
      allOf:
        - $ref: '#/components/schemas/Account'
        - $ref: '#/components/schemas/Login'
    Environment:
      title: Environment
      type: object
      description: 'Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).'
      required:
        - id
        - name
        - cluster
        - about
        - creator
        - hub_id
        - state
        - events
        - features
        - services
        - private_network
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the environment resource.
        cluster:
          type: string
          description: The cluster this environment is associated with.
        about:
          $ref: '#/components/schemas/About'
        creator:
          $ref: '#/components/schemas/Creator'
        hub_id:
          $ref: '#/components/schemas/HubID'
        state:
          $ref: '#/components/schemas/EnvironmentState'
        events:
          title: EnvironmentEvents
          type: object
          description: A collection of timestamps for each event in the environment's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the environment was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the environment was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the environment was deleted.
              $ref: '#/components/schemas/DateTime'
        features:
          $ref: '#/components/schemas/Features'
        services:
          $ref: '#/components/schemas/EnvironmentServices'
        private_network:
          $ref: '#/components/schemas/PrivateNetwork'
        meta:
          $ref: '#/components/schemas/EnvironmentMeta'
    EnvironmentIncludes:
      title: EnvironmentInclude
      description: An identity that is associated with an environment.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Environment'
    EnvironmentMeta:
      title: EnvironmentMeta
      type: object
      description: A list of meta fields that can be applied to this environment.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
        containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainerSummary'
    EnvironmentServiceContainerSummary:
      title: EnvironmentServiceContainerSummary
      type: object
      description: An object containing information about a service container associated with this environment.
      required:
        - enable
        - container_id
        - state
      properties:
        enable:
          type: boolean
          description: Whether or not the service is enabled.
        container_id:
          $ref: '#/components/schemas/ID'
        state:
          $ref: '#/components/schemas/ContainerState'
    EnvironmentServices:
      title: EnvironmentServices
      type: object
      description: Service containers run by this environment and their configurations.
      required:
        - loadbalancer
      properties:
        loadbalancer:
          $ref: '#/components/schemas/LoadBalancerEnvironmentService'
        discovery:
          $ref: '#/components/schemas/DiscoveryEnvironmentService'
        vpn:
          $ref: '#/components/schemas/VpnEnvironmentService'
    EnvironmentState:
      title: EnvironmentState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the environment.
              type: string
              enum:
                - new
                - live
                - cloning
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    EnvironmentSummary:
      title: EnvironmentSummary
      type: object
      description: Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
      required:
        - id
        - state
        - services
        - stats
      properties:
        id:
          $ref: '#/components/schemas/ID'
        state:
          $ref: '#/components/schemas/EnvironmentState'
        services:
          title: EnvironmentServiceSummary
          type: object
          description: 'An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.'
          required:
            - loadbalancer
            - discovery
            - vpn
          properties:
            loadbalancer:
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
            discovery:
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
            vpn:
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
        stats:
          title: EnvironmentSummaryStats
          type: object
          description: Statistics about the containers and instances associated with this environment.
          required:
            - containers
            - instances
          properties:
            containers:
              $ref: '#/components/schemas/StateCountSummary'
            instances:
              $ref: '#/components/schemas/StateCountSummary'
    EnvironmentTasks:
      title: EnvironmentTasks
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - start
            - stop
            - delete
          description: The name of the action to perform.
    Error:
      title: Error
      description: |-
        The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
        There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
      type: object
      required:
        - 'status, code, title'
      properties:
        status:
          type: integer
          description: The HTTP response code.
          enum:
            - 400
            - 401
            - 403
            - 404
            - 415
            - 422
            - 500
        code:
          type: string
          description: A Cycle standard error code.
          enum:
            - 400.invalid_syntax
            - 403.hub_mismatch
            - 403.hub_not_ready
            - 403.environment_not_ready
            - 403.restricted_portal
            - 403.signup
            - 403.permissions
            - 403.wrong_scope
        title:
          type: string
          description: The main text describing the error.
        detail:
          type: string
          description: A more detailed description of the error.
        source:
          type: string
          description: 'A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.'
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: An error response.
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          nullable: true
          type: object
          default: null
    Events:
      title: Events
      description: 'Cycle resources usually contain an events field, the event being the key and a formatted time string being the value.'
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DateTime'
    Features:
      title: Features
      type: object
      description: An object representing specialized features configured for this environment.
      required:
        - legacy_networking
      properties:
        legacy_networking:
          description: Whether or not legacy networking mode is enabled on this environment.
          type: boolean
    FeaturesSpec:
      title: FeaturesServerSpec
      type: object
      required:
        - raid
      description: The spec for server features.
      properties:
        raid:
          type: string
          description: 'The type of raid supported, if any.'
          nullable: true
        aws:
          type: object
          description: Features specific to AWS.
          required:
            - ena_support
            - ebs_optimized
          properties:
            ena_support:
              type: boolean
              description: A boolean where true indicates this is a machine that can support a much higher networking throughput.
            ebs_optimized:
              type: boolean
              description: A boolean where true indicates this is a machine that can support higher storage throughput.
    GPUSpec:
      title: GPUServerSpec
      type: object
      description: Information about a given servers GPU resources.
      required:
        - count
        - type
      properties:
        count:
          type: integer
          description: The number of GPUs.
        cores:
          type: integer
          description: The number of cores.
        vram_gb:
          type: integer
          description: The amount of virtaul RAM for the GPU.
        type:
          type: string
          description: The type of the GPU.
        shared:
          type: boolean
          description: A boolean where true represents the GPU is shared.
        extra:
          type: object
          description: Extra information about the GPU if there is any.
          additionalProperties:
            type: string
    GenerateStackBuildAction:
      title: GenerateStackBuild
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - generate
    Geographic:
      title: LocationGeographic
      type: object
      description: Geographic information about a provider location.
      required:
        - latitude
        - longitude
        - city
        - state
        - country
        - region
      properties:
        latitude:
          type: integer
          description: The latitude of the given provider datacenter.
        longitude:
          type: integer
          description: The longitude of the given provider datacenter.
        city:
          type: string
          description: The city the datacenter resides in.
        state:
          type: string
          description: The state the datacenter resides in.
        country:
          type: string
          description: The country the datacenter resides in.
        region:
          type: string
          description: The region the datacenter resides in.
    HAProxyConfig:
      type: object
      required:
        - frontend
        - backend
      properties:
        frontend:
          type: object
          nullable: true
          description: Settings that describe how incoming traffic to the load balancer is handled.
          required:
            - mode
            - max_connections
            - timeouts
          properties:
            mode:
              type: string
              description: |-
                The type of traffic expected by the load balancer for this port. Can be either: 
                 - tcp: Traffic is forwarded without any parsing or additional manipulation. 
                 - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
              enum:
                - tcp
                - http
            max_connections:
              type: integer
              nullable: true
              description: The number of simultaneous connections that can be processed at a time.
            timeouts:
              type: object
              nullable: true
              description: Various options for handling timeouts when communicating with the client.
              required:
                - client_secs
                - client_fin_ms
                - http_keep_alive_ms
                - http_request_ms
              properties:
                client_secs:
                  type: integer
                  nullable: true
                  description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                client_fin_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                http_keep_alive_ms:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)'
                http_request_ms:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)'
        backend:
          type: object
          nullable: true
          description: Settings related to how the load balancer routes connections to container instances.
          required:
            - balance
            - timeouts
          properties:
            balance:
              type: string
              description: |-
                How connections are balanced across your container instances. Can be one of the following: 
                 - `round-robin`: Each container instance is used in turns. 
                 - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic. 
                 - `leastconn`: Routes traffic to the instance with the least number of active connections. 
                 - `first`: Routes traffic to the first available instance. 
                 - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
              enum:
                - round-robin
                - static-rr
                - leastconn
                - first
                - source
            timeouts:
              type: object
              nullable: true
              description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
              required:
                - server_secs
                - server_fin_ms
                - connect_ms
                - queue_ms
                - tunnel_secs
              properties:
                server_secs:
                  type: integer
                  nullable: true
                  description: 'The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.'
                server_fin_ms:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.'
                connect_ms:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.'
                queue_ms:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.'
                tunnel_secs:
                  type: integer
                  nullable: true
                  description: 'The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.'
    Hub:
      title: Hub
      description: A hub resource.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the hub.
        creator:
          $ref: '#/components/schemas/Creator'
        events:
          title: HubEvents
          type: object
          description: A collection of timestamps for each event in the hub's lifetime.
          required:
            - created
            - updated
            - deleted
            - first_provider
            - first_server
            - first_environment
            - first_image
            - first_container
          properties:
            created:
              description: The timestamp of when the hub was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the hub was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the hub was deleted.
              $ref: '#/components/schemas/DateTime'
            first_provider:
              description: The timestamp of when the hub had the first provider added.
              $ref: '#/components/schemas/DateTime'
            first_server:
              description: The timestamp of when the hub had the first_server deployed.
              $ref: '#/components/schemas/DateTime'
            first_environment:
              description: The timestamp of when the hub had the first environment deployed.
              $ref: '#/components/schemas/DateTime'
            first_image:
              description: The timestamp of when the hub had the first image deployed.
              $ref: '#/components/schemas/DateTime'
            first_container:
              description: The timestamp of when the hub had the first container deployed.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/HubState'
        integrations:
          $ref: '#/components/schemas/HubIntegrations'
        webhooks:
          type: object
          description: All hub webhooks for the given hub.
          required:
            - server_deployed
          properties:
            server_deployed:
              nullable: true
              type: string
              description: A webhook to report information to each time a server is deployed on the given hub.
        billing:
          $ref: '#/components/schemas/BillingProfile'
        meta:
          $ref: '#/components/schemas/HubMeta'
    HubID:
      title: HubID
      type: string
      description: The unique ID of the Hub this resource was created in.
    HubIntegrations:
      title: HubIntegrations
      description: Integration information for a given hub.
      type: object
      required:
        - letsencrypt
        - backblaze_b2
      properties:
        letsencrypt:
          type: object
          description: A hub integration with Lets Encrypt service.
          required:
            - email
          nullable: true
          properties:
            email:
              type: string
              description: An email address to assocaite with Lets Encrypt certificates generated for DNS records on this hub.
        backbalze_b2:
          type: object
          description: Information about the Backblaze account and bucket assocaited with the given hub.
          required:
            - bucket
            - key_id
            - key
          nullable: true
          properties:
            bucket:
              type: string
              description: The bucket name.
            key_id:
              type: string
              description: The `key_id` from Backblaze for a given key ( the one used for this integration ).
            key:
              type: string
              description: The key associated with the bucket.
    HubMembership:
      title: HubMembership
      type: object
      description: A membership resource that is scoped to an individual hub.
      required:
        - id
        - account_id
        - hub_id
        - role
        - events
        - state
        - invitation
        - permissions
        - prefereneces
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account_id:
          type: string
          description: An ID for the account associated with the given membership.
        hub_id:
          $ref: '#/components/schemas/HubID'
        role:
          type: integer
          description: A number that maps to the currently set role of the member.
          enum:
            - 1 (Owner)
            - 2 (Admin)
            - 3 (Developer)
            - 4 (Analyst)
        events:
          title: MembershipEvents
          type: object
          description: A collection of timestamps for each event in the membership's lifetime.
          required:
            - created
            - updated
            - deleted
            - joined
          properties:
            created:
              description: The timestamp of when the membership was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the membership was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the membership was deleted.
              $ref: '#/components/schemas/DateTime'
            joined:
              description: The timestamp of when the membership was accepted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/MembershipState'
        invitation:
          $ref: '#/components/schemas/Invitation'
        permissions:
          type: object
          description: Information about this members permissions for a given hub.
          required:
            - all_environments
            - environments
          properties:
            all_environments:
              type: boolean
              description: A boolean where true represents the member has access to view and manage all environments for the hub.
            environments:
              description: An array of environments this membership has access to.
              type: array
              items:
                type: object
                description: Environment membership resources.
                required:
                  - id
                  - manage
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  manage:
                    type: boolean
                    description: A boolean where true represents this environment can be managed by the membership (i.e. its not just read-only).
        prefereneces:
          type: object
          description: Preference information set by the user for the membership.
          required:
            - notifications
          properties:
            notifications:
              type: object
              description: Notification preferences for the membership.
              required:
                - api_keys
              properties:
                api_keys:
                  type: boolean
                  description: A boolean where true represents the desire for the membership to get notifications about activity generated by API key type events.
        cycle:
          type: object
          description: Infromation about the membership as it pertains to the account holders affiliation with being a Cycle employee. Cycle employee accounts do not consume a "membership" for a given hub.
          required:
            - employee_id
          properties:
            employee_id:
              type: string
              description: The ID of the employee this membership is associated with.
        meta:
          $ref: '#/components/schemas/HubMembershipMeta'
    HubMembershipIncludes:
      title: HubMembershipsIncludes
      type: object
      description: A resource thats associated with a hub membershp.
      properties:
        senders:
          type: object
          description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        hubs:
          type: object
          description: A record with an ID mapped to a hub resource.
          additionalProperties:
            $ref: '#/components/schemas/Hub'
        accounts:
          type: object
          description: A record with an ID mapped to a public account.
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
    HubMembershipMeta:
      title: HubMembershipMeta
      type: object
      description: A list of meta fields that can be applied to a membership.
      properties:
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capabilities'
    HubMeta:
      title: HubsMeta
      type: object
      description: A list of meta fields that can be applied to a hub.
      properties:
        membership:
          $ref: '#/components/schemas/HubMembership'
    HubNotificationToken:
      title: HubNotificationPipelineAuthResponse
      description: A token resource.
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: A token used for connecting to the hub notification pipeline websocket API.
    HubState:
      title: HubState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the hub.
              type: string
              enum:
                - new
                - configuring
                - live
                - inactive
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    HugeTLB:
      title: HugeTLB
      type: object
      description: HugeTLB data.
      properties:
        usage:
          type: integer
          description: The number of bytes being consumed by huge pages of all sizes.
        max:
          type: integer
          description: The maximum number of bytes allowed to be used for huge pages for this instance.
        fail_count:
          type: integer
          description: The number of times the hugeTLB memory limit has been exceeded by this instance.
    IALAuth:
      title: IALAuth
      type: object
      description: Infrastructure abstraction layer authentication information.
      properties:
        namespace:
          type: string
          description: A namespace for the IAL entry.
        region:
          type: string
          description: Information about the region being used.
        api_key:
          type: string
          description: The API key used to make a request against the given provider.
        secret:
          type: string
          description: A secret.
        config:
          type: string
          description: A config string.
        cycle:
          type: object
          description: Information about the Cycle properties making the request.
          required:
            - hub_name
            - hub_id
          properties:
            hub_name:
              type: string
              description: The name of the hub.
            hub_id:
              $ref: '#/components/schemas/HubID'
    ID:
      title: ID
      type: string
      description: A unique identifier.
    IP:
      title: IP
      type: object
      description: An IP resource.
      required:
        - id
        - hub_id
        - kind
        - assingment
        - pool_id
        - address
        - gateway
        - cidr
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        kind:
          type: string
          description: The type of IP protocol this IP is.
          enum:
            - ipv4
            - ipv6
        assignment:
          type: object
          description: Information about the assignment of this IP.
          nullable: true
          required:
            - container_id
            - instance_id
            - environment_id
          properties:
            container_id:
              type: string
            instance_id:
              type: string
            environment_id:
              type: string
        pool_id:
          type: string
          description: A unique identifier that associates the IP with an IP pool.
        address:
          type: string
          description: The IP address.
        gateway:
          type: string
          description: The IP gateway.
        cidr:
          type: string
          description: The CIDR for the IP.
        state:
          $ref: '#/components/schemas/IPState'
    IPNet:
      title: IPNet
      type: object
      required:
        - ip
        - cidr
      properties:
        ip:
          type: string
          description: The IP address.
          example: 'fd00::21:0:0:0'
        cidr:
          type: string
          description: 'The CIDR notation, describing the range of IP addresses.'
          example: 'fd00::21:0:0:0/96'
    IPState:
      title: IPState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the IP.
              type: string
              enum:
                - assigning
                - assigned
                - releasing
                - available
    Image:
      title: Image
      type: object
      description: 'An Image Resource, which is a point in time build on a given image source.'
      required:
        - id
        - hub_id
        - name
        - stack
        - size
        - backend
        - tags
        - config
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A user defined name for the image.
        stack:
          type: object
          description: 'If the image is part of a stack, that information will be available here.'
          required:
            - id
            - build_id
            - containers
          properties:
            id:
              $ref: '#/components/schemas/ID'
            build_id:
              type: string
              description: A unique identifier for the build the image is assocaited with.
            containers:
              description: If this image is being used for any containers their identifiers are listed here.
              type: array
              items:
                type: string
        size:
          type: integer
          description: The image size in bytes.
        about:
          type: object
          description: An object that holds information about the image.
          required:
            - description
          properties:
            description:
              type: string
              nullable: true
              description: A description of the image.
        backend:
          type: object
          description: Describes where the image is hosted.
          required:
            - provider
            - size
            - file_name
            - file_id
          properties:
            provider:
              type: string
              description: The provider where this image is hosted.
            size:
              type: string
              description: The size of the image in bytes.
            file_name:
              type: string
              description: 'A file name for the image, used by the platform.'
            file_id:
              type: string
              description: 'A file id for the image, used by the platform.'
        tags:
          description: 'Tags that describe the version, package, or data about the image.'
          type: array
          items:
            type: string
        config:
          type: object
          description: Configuration settings for the image.
          required:
            - user
            - ports
            - env
            - labels
            - command
            - onbuild
            - entrypoint
            - volumes
            - workdir
            - signal_stop
          properties:
            user:
              type: string
              description: The linux user this image runs its processes as.
            ports:
              description: The port settings for the image.
              type: array
              items:
                type: string
            env:
              type: object
              description: Image defined environment variables for the image.
              additionalProperties:
                type: string
            labels:
              type: string
              description: Image labels.
            command:
              description: The CMD array used to start the container.
              type: array
              items:
                type: string
            onbuild:
              description: Additional commands to run at build time.
              type: array
              items:
                type: string
            entrypoint:
              description: An entrypoint command.
              type: array
              items:
                type: string
            volumes:
              description: Volumes information for the given image.
              type: array
              items:
                type: object
                properties:
                  path:
                    type: string
                    description: The path where the volume is mounted.
                  mode:
                    type: string
                    description: Permission settings for the volume.
                    enum:
                      - ro
                      - rw
            workdir:
              type: string
              description: The working directory for the image.
            signal_stop:
              type: string
              description: A set command to be run if a signal is called.
        source:
          $ref: '#/components/schemas/ImageSource'
        creator:
          $ref: '#/components/schemas/Creator'
        state:
          $ref: '#/components/schemas/ImageState'
        events:
          title: ImageEvents
          type: object
          description: A collection of timestamps for each event in the image's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ImageMeta'
    ImageIncludes:
      title: ImageIncludes
      description: All includable resources linkable to the given image.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        stack_builds:
          $ref: '#/components/schemas/StackBuildIncludes'
        stacks:
          $ref: '#/components/schemas/StackIncludes'
        sources:
          $ref: '#/components/schemas/ImageSourceIncludes'
    ImageMeta:
      title: ImageMeta
      type: object
      description: A list of meta fields that can be applied to the image.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
    ImageSource:
      title: ImageSource
      type: object
      description: An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
      required:
        - id
        - name
        - origin
        - hub_id
        - state
        - events
        - creator
        - requires
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A name for the image source resource.
        about:
          type: object
          description: Information about the image source resource.
          required:
            - description
          properties:
            description:
              type: string
              description: Some information about the image source resource.
        origin:
          type: object
          description: The origin of the given image source.
          oneOf:
            - $ref: '#/components/schemas/DockerHubSource'
            - $ref: '#/components/schemas/DockerfileRepoSource'
            - $ref: '#/components/schemas/DockerfileTarSource'
            - $ref: '#/components/schemas/DockerRegistrySource'
        creator:
          $ref: '#/components/schemas/Creator'
        state:
          $ref: '#/components/schemas/ImageSourceState'
        events:
          title: ImageSourceEvents
          type: object
          description: A collection of timestamps for each event in the iamge source's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the iamge source was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the iamge source was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the iamge source was deleted.
              $ref: '#/components/schemas/DateTime'
        requires:
          type: object
          description: Infromation about a server resource this image requires to function properly.
          required:
            - nvidia_gpu
          properties:
            nvidia_gpu:
              type: boolean
              description: A boolean where true represents this image requies an Nvidia GPU to run properly.
              nullable: true
    ImageSourceIncludes:
      title: ImageSourceIncludes
      description: A resource associated with an image source.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ImageSource'
    ImageSourceState:
      title: ImageSourceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the image source.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ImageState:
      title: ImageState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the image.
              type: string
              enum:
                - new
                - downloading
                - building
                - verifying
                - saving
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ImageSummary:
      title: ContainerImageSummary
      description: A summary of the image this container was created from.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        service:
          type: string
          nullable: true
          description: 'If a service container, the identifier specifying which service it is.'
          enum:
            - loadbalancer
            - discovery
            - vpn
    ImagesIncludes:
      title: ImageIncludes
      description: A resource associated with an image.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Image'
    ImportImage:
      title: ImportImage
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - import
    InfrastructureSummary:
      title: InfrastructureSummary
      description: An infrastructure summary resource.
      type: object
      required:
        - hub_id
        - images
        - clusters
        - updated
      properties:
        hub_id:
          $ref: '#/components/schemas/HubID'
        images:
          type: object
          description: Statistics about image usage.
          required:
            - tier
          properties:
            tier:
              type: object
              description: Image tier information.
              required:
                - total_mb
                - allocated_mb
                - used_mb
              properties:
                total_mb:
                  type: integer
                  description: A value in MB representing the total MB of space on the infrastructure available for images.
                allocated_mb:
                  type: integer
                  description: A value in MB representing the amount of allocated space for images.
                used_mb:
                  type: integer
                  description: A value in MB representing the total MB of space images are taking up out of the total megabytes available.
        clusters:
          type: object
          description: Records pointing to information about clusters that make up this hubs infrastructure.
          additionalProperties:
            type: object
            required:
              - name
              - resources
              - servers
              - instances
              - healthy
              - versions
            properties:
              name:
                type: string
                description: The name of the cluster
              resources:
                type: object
                description: Information about the aggregate resources of the cluster.
                required:
                  - ram
                  - cpu
                  - disk
                properties:
                  ram:
                    type: object
                    description: Information about the RAM resources for a given cluster.
                    required:
                      - total_mb
                      - allocated_mb
                      - used_mb
                      - provisioned_mb
                    properties:
                      total_mb:
                        type: integer
                        description: The total amount of RAM in MBs for the cluster.
                      allocated_mb:
                        type: integer
                        description: The total amount of allocated RAM in MBs for the cluster.
                      used_mb:
                        type: integer
                        description: The total amount of used MB's of RAM for the cluster.
                      provisioned_mb:
                        type: integer
                        description: The total amount of RAM provisioned for the cluster.
                  cpu:
                    type: object
                    description: Information about the CPU resources for a given cluster.
                    required:
                      - cores
                      - shares
                      - shares_ratio
                    properties:
                      cores:
                        type: integer
                        description: The aggregate number of cores across servers in this cluster.
                      shares:
                        type: object
                        description: Information on the shares available for this cluster.
                        required:
                          - allocated
                          - total
                        properties:
                          allocated:
                            type: integer
                            description: The number of shares allocated for the cluster.
                          total:
                            type: integer
                            description: The total number of shares available for a given cluster.
                      share_ratio:
                        type: integer
                        description: The ratio of shares allocated to total shares for the given cluster.
                  disk:
                    type: object
                    description: Information about the aggregate disk space available for the given cluster.
                    required:
                      - total_mb
                      - used_mb
                    properties:
                      total_mb:
                        type: integer
                        description: 'The total amount of disk space in this cluster, in MBs.'
                      used_mb:
                        type: integer
                        description: 'The amount of disk space used across the given cluster, in MB.'
        updated:
          description: A timestamp of when the infrastructure was last updated.
          $ref: '#/components/schemas/DateTime'
    Instance:
      title: Instance
      type: object
      description: A container instance resource.
      required:
        - id
        - hub_id
        - container_id
        - location_id
        - creator
        - environment
        - stateful
        - provider
        - server_id
        - ready_state
        - hostname
        - migration
        - service
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: A container identifier for the container that is associated with this instance.
        location_id:
          type: string
          description: A location identifier that's associated with the server this instance is deployed to.
        environment:
          $ref: '#/components/schemas/EnvironmentSummary'
        stateful:
          type: object
          description: Additional information about the instance relating to its setting as being stateful.
          nullable: true
          required:
            - id
            - base_hostname
          properties:
            id:
              $ref: '#/components/schemas/ID'
            base_hostname:
              type: string
              description: The base hostname for the given instance.
        provider:
          $ref: '#/components/schemas/ProviderSummary'
        server_id:
          type: string
          description: An identifier for the server this instance is deployed to.
        ready_state:
          type: string
          description: The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run.
          enum:
            - active
            - purge
            - hibernate
        hostname:
          type: string
          description: The hostname of the instance.
        migration:
          type: object
          description: 'If this instance is scheduled to be migrated or has been migrated in the past, there will be information populating this field with the server that the instance came from or the server that the instance was moved to and the instance ID.'
          nullable: true
          required:
            - key
            - copy_volumes
          properties:
            to:
              $ref: '#/components/schemas/MigrationInstance'
            from:
              $ref: '#/components/schemas/MigrationInstance'
            started:
              description: A timestamp of when the migration was started.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: A timestamp of when the migration was completed.
              $ref: '#/components/schemas/DateTime'
            key:
              type: string
              description: A key used by the platform to verify the migration.
            copy_volumes:
              type: boolean
              description: A boolean where true represents the volumes for the instance should be copied to the new server as well.
        purge_time:
          descrption: 'If the instance was purged, the timestamp of when that happened.'
          $ref: '#/components/schemas/DateTime'
        serice:
          type: string
          description: If the instance is an instance of a service container that will be denoted here.
          nullable: true
          enum:
            - discovery
            - vpn
            - loadbalancer
        state:
          $ref: '#/components/schemas/InstanceState'
        events:
          title: InstanceEvents
          description: A collection of timestamps for each event in the instnaces lifetime.
          required:
            - created
            - updated
            - deleted
            - first_started
          properties:
            created:
              description: The timestamp of when the instance was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the instance was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the instance was deleted.
              $ref: '#/components/schemas/DateTime'
            first_started:
              description: The timestamp of when the instance was started.
              $ref: '#/components/schemas/DateTime'
    InstanceConsoleAuth:
      title: InstanceConsoleAuth
      description: Resources needed to connect to the instance console websocket.
      type: object
      required:
        - token
        - address
      properties:
        token:
          type: string
          description: A token used for connecting to the instance console through the websocket API.
        address:
          type: string
          description: The protocol and url for connecting to the console.
    InstanceIncludes:
      title: InstanceIncludes
      description: A resource associated with an instance.
      type: object
      required:
        - creator
        - servers
        - locations
        - providers
        - containers
        - environments
      properties:
        creator:
          $ref: '#/components/schemas/CreatorInclude'
        server:
          $ref: '#/components/schemas/ServersIncludes'
        locations:
          $ref: '#/components/schemas/LocationsIncludes'
        providers:
          $ref: '#/components/schemas/ProvidersIncludes'
        containers:
          $ref: '#/components/schemas/ContainersIncludes'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    InstanceState:
      title: InstanceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the instance.
              type: string
              enum:
                - new
                - starting
                - reimaging
                - migrating
                - running
                - stopping
                - stopped
                - failed
                - deleting
                - deleted
            health:
              type: object
              description: information about the health of the instance.
              required:
                - healthy
                - updated
              properties:
                healthy:
                  type: boolean
                  description: A boolean where true represents the instance being healthy.
                updated:
                  description: A timestamp of the last time the instance health was updated.
                  $ref: '#/components/schemas/DateTime'
        - $ref: '#/components/schemas/State'
    InstanceTelemetry:
      title: EnvironmentInstanceTelemetryPoint
      description: Telemetry points collection for instances in a given environment.
      required:
        - time
        - instances
      type: object
      properties:
        time:
          description: A timestamp for when the data was collected.
          $ref: '#/components/schemas/DateTime'
        instances:
          description: Records for instance state and number of instances in that state.
          enum:
            - new
            - starting
            - reimaging
            - migrating
            - running
            - stopping
            - stopped
            - failed
            - deleting
            - deleted
          type: object
          additionalProperties:
            type: string
    InstanceTelemetryReport:
      title: InstanceResouceTelemetryReport
      type: object
      description: An instance resource telemetry report resource.
      required:
        - request
        - snapshots
      properties:
        request:
          $ref: '#/components/schemas/TelemetryReportRequest'
        snapshots:
          description: An array of telemetry snapshots.
          type: array
          items:
            $ref: '#/components/schemas/ResourceSnapshot'
    InstanceTelemetryStreamAuth:
      title: InstanceTelemetryStreamAuth
      description: Resources needed to connect to the instance telemetery stream.
      type: object
      required:
        - token
        - address
      properties:
        token:
          type: string
          description: A token used for connecting to the instnace telemetry stream through the websocket API.
        address:
          type: string
          description: The protocol and url for connecting to the stream.
    InstanceVolume:
      title: InstanceVolume
      type: object
      description: A container instance volume resource.
      required:
        - id
        - config
        - deployed
        - sftp
      properties:
        id:
          $ref: '#/components/schemas/ID'
        config:
          $ref: '#/components/schemas/Volumes'
        deployed:
          $ref: '#/components/schemas/DeployedVolume'
        sftp:
          $ref: '#/components/schemas/SFTP'
    Integrations:
      title: InfrastructureProviderIntegrations
      type: object
      description: Information about a provider and how it integrates with the platform.
      properties:
        native:
          $ref: '#/components/schemas/Native'
        abstraction:
          $ref: '#/components/schemas/Abstraction'
    Invitation:
      title: HubMembershipInvitation
      type: object
      description: Information about a hub membership invitation.
      required:
        - sender
        - recipient
        - events
      properties:
        sender:
          type: object
          description: Information about the origin account of the invitation.
          required:
            - id
            - type
          properties:
            id:
              $ref: '#/components/schemas/ID'
            type:
              type: string
              description: The account type.
        recipient:
          type: string
          description: The email address for the invitations recipient.
        events:
          title: InvitationEvents
          type: object
          description: A collection of timestamps for each event in the invitation's lifetime.
          required:
            - created
            - updated
            - deleted
            - accepted
            - declined
            - revoked
          properties:
            created:
              description: The timestamp of when the invitation was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the invitation was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the invitation was deleted.
              $ref: '#/components/schemas/DateTime'
            accepted:
              description: The timestamp of when the invitation was accepted.
              $ref: '#/components/schemas/DateTime'
            declined:
              description: The timestamp of when the invitation was declined.
              $ref: '#/components/schemas/DateTime'
            revoked:
              description: The timestamp of when the invitation was revoked.
              $ref: '#/components/schemas/DateTime'
    Job:
      title: Job
      description: A job resource.
      type: object
      required:
        - id
        - queue
        - caption
        - events
        - schedule
        - expires
        - tasks
        - hash
        - limit_duplicates
        - creator
        - hub_id
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        queue:
          type: string
          description: A dash separated string showing the environment_id where the job is taking place.
        caption:
          type: string
          description: A short description of the job.
        events:
          title: JobEvents
          type: object
          description: A collection of timestamps for each event in the job's lifetime.
          required:
            - queued
            - completed
            - started
          properties:
            queued:
              description: The timestamp of when the job was queued.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: The timestamp of when the job was completed.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the job was started.
              $ref: '#/components/schemas/DateTime'
        schedule:
          description: A timestamp of when the job was scheduled.
          $ref: '#/components/schemas/DateTime'
        tasks:
          description: An array of job tasks.
          type: array
          items:
            $ref: '#/components/schemas/JobTasks'
        expires:
          description: A timestamp for when the job expires.
          $ref: '#/components/schemas/DateTime'
        hash:
          type: string
          description: A combination of the individual task details and job details.
        limit_duplicates:
          type: boolean
          description: A boolean where true represents the job is set to prevent duplicates of itself quickly after creation.
        creator:
          $ref: '#/components/schemas/Creator'
        state:
          $ref: '#/components/schemas/JobState'
    JobState:
      title: JobState
      allOf:
        - required:
            - current
          properties:
            current:
              description: the current state of the job.
              type: string
              enum:
                - new
                - queued
                - error
                - scheduled
                - expired
                - running
                - completed
        - $ref: '#/components/schemas/State'
    JobTasks:
      title: JobTasks
      description: Information about a job task.
      required:
        - id
        - caption
        - header
        - action
        - events
        - steps
        - state
        - failable
        - input
        - output
        - error
      properties:
        id:
          $ref: '#/components/schemas/ID'
        caption:
          type: string
          description: A short description of the task.
        header:
          type: string
          description: The API function called.
        action:
          type: string
          description: The action being handled by the job.
        events:
          title: JobEvents
          type: object
          description: A collection of timestamps for each event in the job's lifetime.
          required:
            - queued
            - completed
            - started
          properties:
            queued:
              description: The timestamp of when the job was queued.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: The timestamp of when the job was completed.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the job was started.
              $ref: '#/components/schemas/DateTime'
        steps:
          description: An array of job task steps.
          type: array
          items:
            $ref: '#/components/schemas/TaskStep'
        state:
          $ref: '#/components/schemas/TaskState'
        failable:
          type: boolean
          description: A boolean where true indicates the job is failable.
        input:
          type: object
          description: Input information used for the job tasks.
          additionalProperties:
            type: string
        output:
          type: object
          description: Output informaiton used for the job tasks.
          additionalProperties:
            type: string
        error:
          type: object
          description: An error object describing issues with the job.
          required:
            - message
          properties:
            message:
              type: string
              description: An error message
              nullable: true
    LegacyNetwork:
      title: LegacyNetwork
      type: object
      nullable: true
      description: Legacy network information for an environment.
      required:
        - subnet
        - ipv4
      properties:
        subnet:
          type: integer
          description: The IPv4 subnet Id.
        ipv4:
          allOf:
            - description: IPv4 information available from environemnts using legacy networking.
            - $ref: '#/components/schemas/IPNet'
    Load:
      title: ServerStatsLoad
      type: object
      description: Statistics about the current load on the server.
      required:
        - avg1m
        - avg5m
        - avg15m
      properties:
        avg1m:
          type: integer
          description: The 1 minute load average.
        avg5m:
          type: integer
          description: The 5 minute load average.
        avg15m:
          type: integer
          description: the 15 minute load average.
    LoadBalancerEnvironmentService:
      title: LoadBalancerEnvironmentService
      type: object
      nullable: true
      description: Information about the environments loadbalancer service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the loadbalancer service is enabled.
        container_id:
          type: string
          description: The ID of the loadbalancer service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          description: The config object for the loadbalancer service.
          nullable: true
          required:
            - deploy
            - haproxy
          properties:
            deploy:
              type: string
              description: |-
                The deployment strategy for this environment's load balancer(s). 
                 - single: Deploys a single load balancer instance to the first available node in the target environment's cluster. 
                 - per-provider: Deploys a load balancer instance to the first available node for every provider in the target environment's cluster. 
                 - per-location: Deploys a load balancer instance to one node per location in the target environment's cluster.
              enum:
                - single
                - per-provider
                - per-location
            haproxy:
              type: object
              description: Describes settings that are passed to HAProxy within the load balancer.
              nullable: true
              required:
                - default
                - ports
                - ipv4
                - ipv6
              properties:
                default:
                  allOf:
                    - description: Settings that are applied to any port that is not overridden in the following ports section.
                    - $ref: '#/components/schemas/HAProxyConfig'
                ports:
                  allOf:
                    - description: 'An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.'
                    - $ref: '#/components/schemas/HAProxyConfig'
                ipv4:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv6.
    LoadBalancerInfoReturn:
      title: LoadBalancerInfoReturn
      type: object
      description: 'Information about an environments load balancer configuration, state, and availability settings.'
      required:
        - default_config
        - service
      properties:
        default_config:
          type: object
          description: The default configuration of the load balancer.
          properties:
            haproxy:
              type: object
              description: Describes settings that are passed to HAProxy within the load balancer.
              nullable: true
              required:
                - default
                - ports
                - ipv4
                - ipv6
              properties:
                default:
                  allOf:
                    - description: Settings that are applied to any port that is not overridden in the following ports section.
                    - $ref: '#/components/schemas/HAProxyConfig'
                ports:
                  allOf:
                    - description: 'An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.'
                    - $ref: '#/components/schemas/HAProxyConfig'
            ipv4:
              type: boolean
              nullable: true
              description: Allow / disallow traffic to be routed via IPv4.
            ipv6:
              type: boolean
              nullable: true
              description: Allow / disallow traffic to be routed via IPv6.
        service:
          type: object
          description: 'Contains information about the status of the load balancer, as well as configuration overrides.'
          required:
            - enable
            - container_id
            - high_availability
          properties:
            enable:
              type: boolean
              description: Whether or not the loadbalancer service is enabled.
            container_id:
              type: string
              description: The ID of the loadbalancer service container
            high_availability:
              type: boolean
              description: A boolean representing if this service container is set to high availability mode or not.
            config:
              type: object
              description: 'Contains custom configuration overrides for the load balancer. If null, the default config will be used.'
              properties:
                haproxy:
                  type: object
                  description: Describes settings that are passed to HAProxy within the load balancer.
                  nullable: true
                  required:
                    - default
                    - ports
                    - ipv4
                    - ipv6
                  properties:
                    default:
                      allOf:
                        - description: Settings that are applied to any port that is not overridden in the following ports section.
                        - $ref: '#/components/schemas/HAProxyConfig'
                    ports:
                      allOf:
                        - description: 'An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.'
                        - $ref: '#/components/schemas/HAProxyConfig'
                    ipv4:
                      type: boolean
                      nullable: true
                      description: Allow / disallow traffic to be routed via IPv4.
                    ipv6:
                      type: boolean
                      nullable: true
                      description: Allow / disallow traffic to be routed via IPv6.
    Location:
      title: InfrastructureProviderLocation
      type: object
      description: Location information for a given provider.
      required:
        - id
        - name
        - geographic
        - provider
        - compatible
        - features
        - abbreviation
        - annotations
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the location.
        geographic:
          $ref: '#/components/schemas/Geographic'
        provider:
          $ref: '#/components/schemas/LocationProvider'
        compatible:
          type: boolean
          description: A boolean where true means the locaiton is supported by the platform.
        features:
          type: object
          description: Additional information about available and supported features of the provider location.
          required:
            - available
            - supported
          properties:
            available:
              description: Available features for the provider location.
              type: array
              items:
                type: string
            supported:
              description: Supported features for the provider location.
              type: array
              items:
                type: string
        abbreviation:
          type: string
          description: An abbreviation for the given provider locaiton.
        annotations:
          type: object
          description: Additional information about the given provider locaiton.
          additionalProperties:
            type: string
    LocationProvider:
      title: LocationProvider
      type: object
      description: Information about the locaiton of the provider.
      required:
        - identifier
        - location
        - code
      properties:
        identifier:
          type: string
          description: An identifier for the given provider
        location:
          type: string
          description: A location name returned from the provider.
        code:
          type: string
          description: A location code returned from the provider.
    LocationsIncludes:
      title: LocationIncludes
      description: A resource thats associated with a provider location.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Location'
    Login:
      title: BaseLogin
      type: object
      description: A login event resource.
      required:
        - id
        - account
        - time
        - type
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account:
          $ref: '#/components/schemas/AccountInfo'
        time:
          description: A timestamp of the time the login occurred.
          $ref: '#/components/schemas/DateTime'
        type:
          type: string
          description: The type of login mechanism used.
          enum:
            - password
            - employee
        success:
          type: boolean
          description: A boolean where true reflects that the login was successful.
    Logs:
      title: BackupLogs
      type: object
      description: Backup logs for a given container.
      required:
        - id
        - backup_id
        - hub_id
        - type
        - log
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        backup_id:
          type: string
          description: An identifier for the backup.
        hub_id:
          $ref: '#/components/schemas/HubID'
        type:
          type: string
          description: The type of the backup log.
          enum:
            - restore
            - backup
        log:
          type: string
          description: The log.
        events:
          title: BackupLogEvents
          type: object
          description: A collection of timestamps for each event in the backup log's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the backup log was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the backup log was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the backup log was deleted.
              $ref: '#/components/schemas/DateTime'
    MembershipState:
      title: MembershipState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the membership.
              type: string
              enum:
                - pending
                - accepted
                - declined
                - revoked
                - deleted
        - $ref: '#/components/schemas/State'
    MemoryData:
      title: MemoryData
      type: object
      properties:
        usage:
          type: number
          description: The number in bytes of memory being used by the instance at the time of the snapshot.
        max_usage:
          type: number
          description: The highest amoun tof memory usage since the last restart.
        fail_count:
          type: number
          description: The number of times the memory liimit was exceeded for the instance.
        limit:
          type: number
          description: The maximum number of bytes of memory this instance has acess to.
    MemorySnapshot:
      title: InstanceTelemetryMemorySnapshot
      type: object
      description: A snapshot of memory usage statistics.
      properties:
        cache:
          type: number
          description: The number of bytes of page cache memory being used by this instance.
        usage:
          description: The memory usage data.
          $ref: '#/components/schemas/MemoryData'
        swap_usage:
          description: Memory swap usage data.
          $ref: '#/components/schemas/MemoryData'
        kernel_usage:
          description: Kernal memory usage.
          $ref: '#/components/schemas/MemoryData'
        kernel_tcp_usage:
          description: Kernel TCP buffer usage.
          $ref: '#/components/schemas/MemoryData'
    MemorySpec:
      title: MemoryServerSpec
      type: object
      description: Information about the memory resources of a given server.
      required:
        - size_gb
        - type
        - extra
      properties:
        size_gb:
          type: integer
          description: A number that represents the memory resources in GB.
        type:
          type: string
          description: The type of the memory resources.
        extra:
          type: object
          description: Extra inforamtion about the memory resources.
          additionalProperties:
            type: string
    Migrate:
      title: MigrateAction
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - migrate
          description: The name of the action to perform.
        contents:
          type: object
          required:
            - destination_server_id
          properties:
            destination_server_id:
              type: string
              description: The ID of the server being migrated to.
            stateful:
              type: object
              description: Information about additonal configuration settings used when migrating a stateful instance.
              required:
                - copy_volumes
              properties:
                copy_volumes:
                  type: boolean
                  description: A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration.
    MigrationInstance:
      title: MigrationInstance
      type: object
      description: Information about an instances migration.
      required:
        - instance_id
        - server_id
      properties:
        instance_id:
          type: string
          description: The ID of the instance.
        server_id:
          type: string
          description: The ID of the server in the context its represented.
    Native:
      title: InfrastructureProviderNative
      type: object
      description: Information about a natively supported infrastructure provider.
      required:
        - identifier
        - auth
      properties:
        identifier:
          $ref: '#/components/schemas/NativeProviderIdentifier'
        auth:
          $ref: '#/components/schemas/IALAuth'
    NativeProviderIdentifier:
      title: NativeProviderIdentifier
      type: string
      description: An identifier for the native provider
      enum:
        - aws
        - equinix-metal
        - vultr
    Network:
      title: ServerStatsNetwork
      type: object
      description: Statistics about the networks on a given server.
      required:
        - external_ipv4
        - external_ipv6
      properties:
        interfaces:
          type: object
          description: Network interfaces for a given server.
          additionalProperties:
            type: object
            description: Network interface.
            properties:
              interface:
                type: string
                description: The interface name.
              flags:
                type: string
                description: Flags for the given interface.
              mtu:
                type: integer
                description: The maximum transmission unit for the interface.
              mac_addr:
                type: string
                description: The mac address for the interface.
              addrs:
                description: An array of IP addresses associated with the interface.
                type: array
                items:
                  type: string
        external_ipv4:
          type: string
          description: The public IPv4 address used to connect to this server.
        external_ipv6:
          type: string
          description: The public IPv6 address used to connect to this server.
    NetworkIncludes:
      title: NetworkIncludes
      description: All includable resource linkable to the given network.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    NetworkSpec:
      title: NetworkServerSpec
      type: object
      description: Information about the network resources for a given server.
      required:
        - count
        - scope
        - throughput
        - type
      properties:
        count:
          type: integer
          description: The number of network resources for a given server.
        scope:
          type: string
          description: The scope of the interfaces.
          enum:
            - public
            - private
            - shared
        throughput:
          type: integer
          description: The network throughput in MB(per second).
        type:
          type: string
          description: The type of the NIC.
    NetworkState:
      title: NetworkState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the network.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    OS:
      title: ServerStatsOS
      type: object
      description: Statistics about the operating system installed on the server (CycleOS).
      properties:
        release:
          type: string
          description: The currently installed release version of the OS.
        kernel:
          type: string
          description: The currently installed kernel version.
        hostname:
          type: string
          description: The hostname as set by the given server's OS.
    PasswordLogin:
      title: AccountPasswordLogin
      type: object
      description: A login event where the account password was the authentication type.
      required:
        - id
        - account
        - time
        - type
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account:
          $ref: '#/components/schemas/AccountInfo'
        time:
          description: A timestamp of the time the login occurred.
          $ref: '#/components/schemas/DateTime'
        type:
          type: string
          description: The type of login mechanism used.
          enum:
            - password
        success:
          type: boolean
          description: A boolean where true reflects that the login was successful.
    Permissions:
      title: Permissions
      description: Permissions information for an API Key
      type: object
      required:
        - all_environments
        - environments
      properties:
        all_environments:
          type: boolean
          description: 'A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments'
        environments:
          title: EnvironmentPermission
          description: An environment ID and a boolean representing management configuration for an API key
          type: object
          required:
            - id
            - manage
          properties:
            id:
              $ref: '#/components/schemas/ID'
            manage:
              type: boolean
              description: 'A boolean, where true represents the API keys ability to make changes to the environment components'
    PipeContainerBaseAction:
      title: PipelineContainerTask
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/ContainerAction'
    PipeContainerCreate:
      title: PipelineContainerCreate
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/requestBodies/CreateContainer'
    PipeContainerReimage:
      title: PipelineContainerReimage
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/Reimage'
    PipeContainerRestart:
      title: PipelineContainerCreate
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/Reimage'
    PipeEnvironmentCreate:
      title: PipelineEnvironmentCreate
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/requestBodies/CreateEnvironmentBody'
    PipeEnvironmentTasks:
      title: PipelineEnvironmentTasks
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/EnvironmentTasks'
    PipeImageCreate:
      title: PipelineImageCreate
      allOf:
        - properties:
            name:
              type: string
              description: A name for the image.
        - $ref: '#/components/schemas/ResourceLocation'
    PipeImageImport:
      title: PipelineImageImport
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/ImportImage'
    PipeImageSourceCreate:
      title: PipelineImageSourceCreate
      allOf:
        - required:
            - name
            - origin
            - type
          properties:
            name:
              type: string
              description: The image source name.
            about:
              type: object
              description: Information about the image source resource.
              required:
                - description
              properties:
                description:
                  type: string
                  description: Some information about the image source resource.
            origin:
              type: object
              description: The origin of the given image source.
              oneOf:
                - $ref: '#/components/schemas/DockerHubSource'
                - $ref: '#/components/schemas/DockerfileRepoSource'
                - $ref: '#/components/schemas/DockerfileTarSource'
                - $ref: '#/components/schemas/DockerRegistrySource'
            type:
              type: string
              description: The type of image source.
              enum:
                - direct
        - $ref: '#/components/schemas/ResourceLocation'
    PipeSleep:
      title: PipelineSleep
      type: object
      description: Settings for the sleep step for a pipeline.
      required:
        - seconds
      properties:
        seconds:
          type: integer
          description: 'Total duration (seconds) to run this step for, before moving on to the next step.'
    PipeStackBuildCreate:
      title: PipelineStackBuildCreate
      type: object
      description: Settings for the create stack build step for a pipeline.
      required:
        - stack
        - type
        - instructions
      properties:
        stack:
          $ref: '#/components/schemas/ResourceLocation'
        type:
          type: string
          description: The type of stack build.
          enum:
            - direct
        instructions:
          type: object
          description: Git information on where to pull stack resources from.
          properties:
            git:
              type: object
              description: Git information specifics.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of information the user is passing.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The actual value to be passed.
        about:
          type: object
          description: Information about the stack build.
          required:
            - version
            - description
          properties:
            version:
              type: string
              description: Information about the version of the stack.
            description:
              type: string
              description: Information describing the stack
            git_commit:
              $ref: '#/components/schemas/StackGitCommit'
    PipeStackBuildDeploy:
      title: PipelineStackBuildDeploy
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/DeployStackBuildAction'
    PipeStackBuildGenerate:
      title: PipelineStackBuildGenerate
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/GenerateStackBuildAction'
    PipeWebhookPost:
      title: PipelineWebhook
      allOf:
        - $ref: '#/components/schemas/ResourceLocation'
        - $ref: '#/components/schemas/WebHookPost'
    Pipeline:
      title: Pipeline
      type: object
      description: A pipeline resource.
      required:
        - id
        - hub_id
        - name
        - creator
        - disable
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the pipeline.
        creator:
          $ref: '#/components/schemas/Creator'
        hub_id:
          $ref: '#/components/schemas/HubID'
        disable:
          type: boolean
          description: A boolean where true signifies the pipeline is disabled.
        stages:
          description: An array of stages.
          type: array
          items:
            $ref: '#/components/schemas/PipelineStage'
        events:
          title: PipelineEvents
          type: object
          description: A collection of timestamps for each event in the pipelines's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the pipeline was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the pipeline was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the pipeline was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/PipelineState'
    PipelineIncludes:
      title: PipelineIncludes
      description: All includable resources linkable to the given pipeline.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        name:
          type: string
          description: A name value.
        components:
          type: object
          description: A record of resources that can be associated with the pipeline.
          additionalProperties:
            anyOf:
              - $ref: '#/components/schemas/Container'
              - $ref: '#/components/schemas/Environment'
              - $ref: '#/components/schemas/Stack'
              - $ref: '#/components/schemas/StackBuild'
              - $ref: '#/components/schemas/Image'
    PipelineStage:
      title: PipelineStage
      type: object
      description: A stage for a given pipeline.
      required:
        - identifier
        - steps
      properties:
        identifier:
          type: string
          description: A stage identifier.
        steps:
          type: array
          description: An array of steps for the stage.
          items:
            $ref: '#/components/schemas/PipelineSteps'
        options:
          type: object
          description: Additonal options for the stage.
          properties:
            skip:
              type: boolean
              description: A boolean where true indicates the given stage should be skipped when the pipeline is run.
    PipelineState:
      title: PipelineState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the pipeline.
              type: string
              enum:
                - new
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    PipelineSteps:
      title: PipelineStep
      type: object
      description: A step for a pipeline stage.
      required:
        - action
        - details
      properties:
        identifier:
          type: string
          description: An identifier for the step.
        action:
          type: string
          description: The action that the step takes.
          enum:
            - sleep
            - webhook.post
            - container.create
            - container.reimage
            - container.restart
            - container.start
            - container.stop
            - container.delete
            - image.source.create
            - image.create
            - image.import
            - images.prune
            - environment.create
            - environmment.start
            - environment.stop
            - environment.delete
            - stack.build.create
            - stack.build.generate
            - stack.build.deploy
        details:
          type: object
          description: Details for the given action which is set for the action key.
          enum:
            - sleep
            - webhook.post
            - container.create
            - container.reimage
            - container.restart
            - container.start
            - container.stop
            - container.delete
            - image.source.create
            - image.create
            - image.import
            - images.prune
            - environment.create
            - environmment.start
            - environment.stop
            - environment.delete
            - stack.build.create
            - stack.build.generate
            - stack.build.deploy
          additionalProperties:
            type: object
            description: One of the following based on the key which is equal to the given action.
            oneOf:
              - $ref: '#/components/schemas/PipeSleep'
              - $ref: '#/components/schemas/PipeWebhookPost'
              - $ref: '#/components/schemas/PipeContainerBaseAction'
              - $ref: '#/components/schemas/PipeContainerCreate'
              - $ref: '#/components/schemas/PipeContainerReimage'
              - $ref: '#/components/schemas/PipeContainerRestart'
              - $ref: '#/components/schemas/PipeEnvironmentCreate'
              - $ref: '#/components/schemas/PipeEnvironmentTasks'
              - $ref: '#/components/schemas/PipeImageCreate'
              - $ref: '#/components/schemas/PipeImageImport'
              - $ref: '#/components/schemas/PipeImageSourceCreate'
              - $ref: '#/components/schemas/PipeStackBuildCreate'
              - $ref: '#/components/schemas/PipeStackBuildDeploy'
              - $ref: '#/components/schemas/PipeStackBuildGenerate'
    Pool:
      title: InfrastructureIPPool
      type: object
      description: An IP Pool resource
      required:
        - id
        - hub_id
        - kind
        - provider
        - server_id
        - floating
        - location_id
        - ips
        - block
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        server_id:
          type: string
          description: An ID associated with a server resource.
        location_id:
          type: string
          description: An ID associated with a location resource.
        kind:
          type: string
          description: The type of IP pool.
          enum:
            - ipv4
            - ipv6
        provider:
          $ref: '#/components/schemas/PoolProvider'
        floating:
          type: boolean
          description: A boolean where true represents the pool as a floating IP pool.
        ips:
          type: object
          description: Data about IPs in the pool.
          required:
            - total
            - available
          properties:
            total:
              type: integer
              description: The total number of IPs in the pool.
            available:
              type: integer
              description: Of the total number of IP's how many are available to be assigned.
        block:
          type: object
          description: Network information about the pool.
          required:
            - cidr
            - gateway
            - netmask
            - network
          properties:
            cidr:
              type: string
              description: A cidr for the pool.
            gateway:
              type: string
              description: A gateway for the pool.
            netmask:
              type: string
              description: A netmask for the pool.
            network:
              type: string
              description: A network for the pool.
        state:
          $ref: '#/components/schemas/PoolState'
    PoolProvider:
      title: IPPoolProvider
      type: object
      description: A IP Pool provider.
      required:
        - identifier
        - location
        - reservation
        - server
        - server_assignment
      properties:
        identifier:
          type: string
          description: An identifier for a native provider.
          enum:
            - equinix-metal
            - vultr
            - aws
        location:
          type: string
          description: Information about the location of the provider this pool is associated with.
        reservation:
          type: string
          description: A reservation identifier associated with the pool reservation.
        server:
          type: string
          description: A server identifier associated with the pool.
        server_assignment:
          type: string
          description: An identifier linked to the server assingment of the IP pool.
    PoolState:
      title: PoolState
      allOf:
        - required:
            - current
          properties:
            current:
              description: the current state of the Pool.
              type: string
              enum:
                - live
                - releasing
                - released
        - $ref: '#/components/schemas/State'
    PrivateNetwork:
      title: PrivateNetwork
      type: object
      nullable: true
      required:
        - vxlan_tag
        - subnet
        - ipv6
        - legacy
      properties:
        vxlan_tag:
          type: integer
          description: The vxlan tag added to each packet to help identify the network.
        subnet:
          type: string
          description: The subnet ID.
        ipv6:
          allOf:
            - description: The IPv6 interface.
            - $ref: '#/components/schemas/IPNet'
        legacy:
          $ref: '#/components/schemas/LegacyNetwork'
    ProcessesSnapshot:
      title: InstanceTelemetryProcessesSnapshot
      type: object
      description: Process information for a given snapshot.
      properties:
        current:
          type: number
          description: The current number of running processes in the instance.
        limit:
          type: number
          description: The maximum number of running processes for the instance.
    Provider:
      title: Provider
      type: object
      description: A provider resource.
      required:
        - id
        - hub_id
        - integrations
        - events
        - creator
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        integrations:
          $ref: '#/components/schemas/Integrations'
        events:
          title: ProviderEvents
          type: object
          description: A collection of timestamps for each event in the provider's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_provision
          properties:
            created:
              description: The timestamp of when the provider was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the provider was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the provider was deleted.
              $ref: '#/components/schemas/DateTime'
            last_provision:
              description: The timestamp of when the provider was last used to provision a server.
              $ref: '#/components/schemas/DateTime'
        creator:
          $ref: '#/components/schemas/Creator'
        state:
          $ref: '#/components/schemas/ProviderState'
    ProviderServer:
      title: ProviderServer
      type: object
      description: A server from a provider.
      required:
        - id
        - name
        - description
        - specs
        - provider
        - price
        - compatible
        - low_resource
        - location_ids
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the server.
        description:
          type: string
          description: A description of the server.
        specs:
          $ref: '#/components/schemas/ServerSpecs'
        provider:
          $ref: '#/components/schemas/ProviderServerSpec'
        price:
          $ref: '#/components/schemas/BillingAmount'
        compatible:
          type: boolean
          description: A boolean where true signifies this server is compatible with the platform.
        low_resource:
          type: boolean
          description: A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads.
        location_ids:
          description: An array of location IDs where this server type is available.
          type: array
          items:
            type: string
    ProviderServerSpec:
      title: ProviderServerSpec
      type: object
      description: Higher level information about a providers server.
      required:
        - identifier
        - category
        - model
        - locations
      properties:
        identifier:
          type: string
          description: A provider identifier
        category:
          type: string
          description: A category for the server.
        class:
          type: string
          description: A class for the server.
        model:
          type: string
          description: The model of the server.
        plan_identifier:
          type: string
          description: 'A plan identifier, if there is one.'
        locaitons:
          description: A list of location ID's this server is available.
          type: array
          items:
            type: string
    ProviderServersServerIncludes:
      title: ProviderServers.Server
      description: A resources that assocaited with a provider server.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProviderServer'
    ProviderState:
      title: ProviderState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the provider.
              type: string
              enum:
                - new
                - verifying
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ProviderSummary:
      title: ProviderSummary
      description: A summary of the provider a given resource is deployed to.
      type: object
      required:
        - identifier
        - location
      properties:
        identifier:
          type: string
          description: An identifier for the provider. Custom IAL providers will be listed as `abstraction-<ID>` where the ID is a MongoDB ID.
          enum:
            - equinix-metal
            - vultr
            - aws
            - abstraction-<MongoID>
        location:
          type: string
          description: A location identifier associated with the provider.
    ProvidersIncludes:
      title: ProvidersIncludes
      description: A resource thats associated with a provider.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Provider'
    PruneStackBuildsAction:
      title: PruneStackBuilds
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - prune
    PublicAccount:
      title: PublicAccount
      description: Publicly available information about an account
      type: object
      required:
        - name
        - email
      properties:
        name:
          title: AccountName
          description: The first and last name of an account owner
          type: object
          required:
            - first
            - last
          properties:
            first:
              type: string
              description: The first name of the account owner
            last:
              type: string
              description: The last name of the account owner
        email:
          title: AccountEmail
          description: Email information for an account
          type: object
          required:
            - address
            - verified
            - added
          properties:
            address:
              type: string
              description: The email address
            verified:
              type: boolean
              description: A boolean representing if the email has been verified
            added:
              $ref: '#/components/schemas/DateTime'
        events:
          allOf:
            - $ref: '#/components/schemas/Events'
            - properties:
                last_login:
                  $ref: '#/components/schemas/DateTime'
    RAM:
      title: ServerStatsRAM
      type: object
      description: Statistics about the RAM on a given server.
      required:
        - available
        - free
        - total
      properties:
        available:
          type: integer
          description: The available RAM on the server.
        free:
          type: integer
          description: The free RAM on the server.
        total:
          type: integer
          description: The total RAM on the server.
    ReconfigureContainer:
      title: ReconfigureContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reconfigure
          description: The action to take.
        contents:
          $ref: '#/components/schemas/Config'
    ReconfigureSDNAction:
      title: ReconfigureSDNNetwork
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - reconfigure
        contents:
          type: object
          description: Additional information needed for the job.
          required:
            - environment_ids
          properties:
            environment_ids:
              description: An array of environment identifiers for the network.
              type: array
              items:
                type: string
    ReconfigureServer:
      title: ReconfigureServerAction
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - reconfigure.features
        contents:
          type: object
          description: Supplemental information needed to perform the action.
          required:
            - sftp
            - base_volume_gb
          properties:
            sftp:
              type: boolean
              description: A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes.
            base_volume_gb:
              type: integer
              description: A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server.
              nullable: true
    ReconfigureVolumes:
      title: ReconfigureVolumeTask
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reconfigure_volumes
          description: The action to take.
        contents:
          description: An array of volume objects to be reconfigured.
          type: array
          items:
            $ref: '#/components/schemas/VolumeSummary'
    Record:
      title: DNSRecord
      type: object
      description: A DNS record.
      required:
        - id
        - hub_id
        - creator
        - zone_id
        - name
        - resolved_domain
        - type
        - features
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/Creator'
        zone_id:
          type: string
          description: A unique identifier for the zone
        name:
          type: string
          description: 'A name used for the record, where `@` signifies the use of the root domain.'
        resolved_domain:
          type: string
          description: The name of the record and the origin as a domain name.
        type:
          $ref: '#/components/schemas/RecordTypes'
        features:
          type: object
          description: TLS features for the record.
          required:
            - certificate
          nullable: true
          properties:
            certificate:
              $ref: '#/components/schemas/Certificate'
        state:
          $ref: '#/components/schemas/RecordState'
        events:
          $ref: '#/components/schemas/Events'
    RecordIncludes:
      title: RecordIncludes
      description: All includable resources linkable to the given records.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        containers:
          $ref: '#/components/schemas/ContainersIncludes'
    RecordState:
      title: DNSRecordState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the record.
              type: string
              enum:
                - pending
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    RecordTypes:
      title: DNSRecordTypes
      type: object
      description: DNS record types the platform supports.
      properties:
        a:
          type: object
          description: A DNS A record
          required:
            - ip
          properties:
            ip:
              type: string
              description: The IPv4 address that the A record should map to.
        aaaa:
          type: object
          description: A DNS AAAA record
          required:
            - ip
          properties:
            ip:
              type: string
              description: The IPv6 address that the AAAA record should map to.
        cname:
          type: object
          description: A DNS CNAME record
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain string the record resolves to.
        ns:
          type: object
          description: A DNS NS record
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain of the nameserver for this record.
        mx:
          type: object
          description: A DNS MX record
          required:
            - priority
            - domain
          properties:
            priority:
              type: string
              description: The priority setting for this mx record.
            domain:
              type: string
              description: The domain this mx record points to.
        txt:
          type: object
          description: A DNS TXT record.
          required:
            - value
          properties:
            value:
              type: string
              description: The value for this TXT record.
        alias:
          type: object
          description: A DNS ALIAS record.
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain string returned from the DNS server when this alias record is requested.
        srv:
          type: object
          description: A DNS SRV record.
          required:
            - weight
            - priority
            - port
            - domain
          properties:
            weight:
              type: integer
              description: Teh weight configured for this record - breaks ties for priority.
            priority:
              type: integer
              description: The priority for the record.
            port:
              type: integer
              description: The port number for the service.
            domain:
              type: string
              description: The domain for the record.
        caa:
          type: object
          description: A DNS CAA record.
          required:
            - tag
            - value
          properties:
            tag:
              type: string
              description: The ASCII string that represents the identifier of the property represented by the record.
            value:
              type: string
              description: The value associated with the tag.
        linked:
          type: object
          description: 'A Linked record is a record special to Cycle.  It represents a url that points to a specific container, however the IP address mapping in handled automatically by the platform.'
          required:
            - features
          properties:
            contianer_id:
              type: string
              description: The ID of the container this record is related to.
            features:
              type: object
              description: Features associated with this record.
              required:
                - tls
              properties:
                tls:
                  type: object
                  description: TLS properties of the record.
                  required:
                    - enable
                  properties:
                    enable:
                      type: boolean
                      description: 'A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform.'
    Reimage:
      title: ReimageContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reimage
          description: The action to take.
        contents:
          type: object
          description: Additional information needed to complete the job.
          required:
            - image_id
          properties:
            image_id:
              type: string
              description: The ID of the image to use when reimaging.
            allow_incompatible:
              type: boolean
              description: A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced.
            overwrite_runtime_config:
              type: boolean
              description: A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process.
    RepoSpec:
      title: StackRepoSourceType
      type: object
      description: A repo source type for a stack.
      required:
        - url
      properties:
        url:
          type: string
          description: The URL of the repository.
        branch:
          type: string
          description: An optional branch arguement.  Default value is `master`.
        auth:
          type: object
          description: Authentication information for the repository.
          required:
            - type
            - credentials
          properties:
            type:
              type: string
              description: The `type` of authentication being used.
            credentials:
              type: object
              description: Authentication credentials for the given type.
              oneOf:
                - $ref: '#/components/schemas/CredentialsHTTP'
                - $ref: '#/components/schemas/CredentialsSSH'
        ref:
          type: object
          description: Repository reference information.
          required:
            - type
            - value
          properties:
            type:
              type: string
              description: The type of reference being used.
              enum:
                - hash
                - tag
            value:
              type: string
              description: The value for the given reference type.
    RepoType:
      title: RepoSourceType
      type: object
      description: A repo source type.
      properties:
        repo:
          type: object
          description: Information about the repostiory.
          required:
            - url
          properties:
            url:
              type: string
              description: The URL of the repository.
            branch:
              type: string
              description: An optional branch arguement.  Default value is `master`.
            auth:
              type: object
              description: Authentication information for the repository.
              required:
                - type
                - credentials
              properties:
                type:
                  type: string
                  description: The `type` of authentication being used.
                credentials:
                  type: object
                  description: Authentication credentials for the given type.
                  oneOf:
                    - $ref: '#/components/schemas/CredentialsHTTP'
                    - $ref: '#/components/schemas/CredentialsSSH'
            ref:
              type: object
              description: Repository reference information.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of reference being used.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The value for the given reference type.
    ResourceLocation:
      title: StepResourceLocation
      type: object
      description: Either a details ID or details from where the ID is an identifier for an existing resource and a from is an identifier from a previous step in this pipeline.
      oneOf:
        - title: DetailsId
          type: object
          properties:
            id:
              type: string
              description: The ID of an existing resource that exists before the pipeline is run.
        - title: DetailsFrom
          type: object
          properties:
            from:
              type: object
              description: The stage and step to report on.
              required:
                - step
              properties:
                stage:
                  type: string
                  description: An identifier for the stage the step being reported on resides in.
                step:
                  type: string
                  description: An identifier for the step to be reported on.
    ResourceSnapshot:
      title: InstanceTelemetryResourceSnapshot
      description: A resource snapshot that shows instance telemetry.
      type: object
      required:
        - time
        - cpu
        - memory
        - processes
      properties:
        time:
          description: A timestamp of the time this snapshot was captured at.
          $ref: '#/components/schemas/DateTime'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: An ID for an associated container.
        instance_id:
          type: string
          description: An ID for an associated instance.
        environment_id:
          type: string
          description: An ID for an associated environment.
        cpu:
          $ref: '#/components/schemas/CPUSnapshot'
        memory:
          $ref: '#/components/schemas/MemorySnapshot'
        processes:
          $ref: '#/components/schemas/ProcessesSnapshot'
        hugetlb:
          $ref: '#/components/schemas/HugeTLB'
    Resources:
      title: ContainerResources
      type: object
      description: Configuration settings for the resource allocations and limits of a given container.
      required:
        - cpu
        - ram
      properties:
        cpu:
          type: object
          description: Configurations settings related to CPU usage.
          properties:
            shares:
              type: object
              description: A share represents 1/10th of the available compute time on a single thread.
              required:
                - limit
                - reserve
              properties:
                limit:
                  type: integer
                  description: The limit (maximum) amount of shares each instance of a container can use.
                reserve:
                  type: integer
                  description: The reserve (allocation) number of shares for each instance of a given container.
            cpus:
              type: array
              items:
                type: integer
              description: An array of CPU cores this container will be pinned to.
        ram:
          type: object
          description: Configuration settings for limits and reserves of RAM resources for the given container.
          properties:
            limit:
              type: string
              description: The limit (maximum) amount of RAM each instance of the given container can use.
              example: '1G, 2M'
            reserve:
              type: string
              description: The reserve (allocation) of RAM given to each instance of the container.
    RestartCompute:
      title: RestartComputeServiceAction
      type: object
      description: A job that restarts compute service on a given server.
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - restart
    RestartServer:
      title: RestartServerAction
      type: object
      description: A job that restarts the server.
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - restart
    RevertMigration:
      title: RevertMigrationAction
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - migrate_revert
          description: The name of the action to perform.
    Runtime:
      title: ContainerRuntime
      type: object
      description: Runtime configurations for a given container.
      required:
        - privileged
      properties:
        command:
          type: object
          description: A command that will be run in place of the images defined startup command.
          required:
            - path
            - args
          properties:
            path:
              type: string
              description: System path for the command.
            args:
              type: string
              description: Arguments to pass to the command.
        namespaces:
          type: array
          items:
            type: string
          description: Namespaces the given container will have access to.
          enum:
            - ipc
            - pid
            - uts
            - network
            - mount
            - user
        environment_vars:
          type: object
          description: A record of environment variables for the given container.
          additionalProperties:
            type: string
        privileged:
          type: boolean
          description: A boolean where true will configure the given container to run in privileged mode.
        capabilities:
          type: array
          items:
            type: string
          description: A list of linux kernel capabilites for the given container.
        workdir:
          type: string
          description: Configure the working directory for the given container.
        sysctl:
          type: object
          description: A record of sysctl fields and values for a given container.
          additionalProperties:
            type: string
        rlimits:
          type: object
          description: A record of rlimits and their values.
          additionalProperties:
            type: object
            properties:
              hard:
                type: integer
                description: The hard limit for the rlimit.
              soft:
                type: integer
                description: The soft limit for the rlimit.
    SDNNetwork:
      title: SDNNetwork
      type: object
      description: SDN Network resource.
      required:
        - id
        - name
        - identifier
        - cluster
        - creator
        - hub_id
        - state
        - private_network
        - environments
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the network.
        identifier:
          type: string
          description: A network identifier used to construct http calls that specifically use this network over another.
        cluster:
          type: string
          description: The infrastructure cluster the environments belonging to this network belong to.
        creator:
          $ref: '#/components/schemas/Creator'
        hub_id:
          $ref: '#/components/schemas/HubID'
        state:
          $ref: '#/components/schemas/NetworkState'
        private_network:
          $ref: '#/components/schemas/SDNPrivateNetwork'
        environments:
          description: An array of environments and timestamps.
          type: array
          items:
            type: object
            required:
              - id
              - added
            properties:
              id:
                $ref: '#/components/schemas/ID'
              added:
                description: A timestamp of when the environment was added.
                $ref: '#/components/schemas/DateTime'
        events:
          title: NetworkEvents
          type: object
          description: A collection of timestamps for each event in the image's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
    SDNPrivateNetwork:
      title: PrivateNetwork
      type: object
      description: Private network information for a Cycle SDN.
      required:
        - vxlan_tag
        - subnet
        - mac_addr_suffix
        - ipv6
      properties:
        vxlan_tag:
          type: integer
          description: A tag used to ensure proper routing.
        subnet:
          type: string
          description: The subnet of the private network.
        mac_addr_suffix:
          type: integer
          description: A number used to ensure a MAC address exists for each network.
        ipv6:
          type: object
          description: IPv6 infromation for the network.
          required:
            - ip
            - cidr
          properties:
            ip:
              type: string
              description: The networks IPv6 base.
            cidr:
              type: string
              description: The private network CIDR.
    SFTP:
      title: InstanceVolumeSFTP
      type: object
      description: Information about connecting to a instance volume over SFTP.
      required:
        - host
        - port
        - username
        - password
      properties:
        host:
          type: string
          description: The hostname for connecting to the volume over SFTP.
        port:
          type: number
          description: The port number to use when connecting.
        username:
          type: string
          description: The username to use when connecting.
        password:
          type: object
          description: Password configuration settings for the remote access of the container volume.
          required:
            - algorithm
            - data
          properties:
            algorithm:
              type: string
              description: The hashing algorithm used to has the password.
              enum:
                - raw
                - sha512
                - md5
            data:
              type: string
              description: The raw or hashed password.
    SSHResponse:
      title: SSHConnectionResponse
      type: object
      description: SSH connection information for a given container instance.
      required:
        - token
        - secret
        - address
      properties:
        token:
          $ref: '#/components/schemas/SSHToken'
        secret:
          type: string
          description: The SSH connection response secret.
        address:
          type: string
          description: The SSH connection response address.
    SSHToken:
      title: SSHToken
      type: object
      description: An SSH token resource.
      required:
        - id
        - instance_id
        - container_id
        - hub_id
        - creator
        - events
        - valid
      properties:
        id:
          $ref: '#/components/schemas/ID'
        instance_id:
          type: string
          description: The ID of the instance being connected to.
        container_id:
          type: string
          description: The ID of the container from which the instance was created.
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/Creator'
        events:
          title: SSHTokenEvents
          type: object
          description: A collection of timestamps for each event in the SSH token's lifetime.
          required:
            - created
            - used
            - expires
          properties:
            created:
              description: The timestamp of when the SSH token was created.
              $ref: '#/components/schemas/DateTime'
            used:
              description: The timestamp of when the SSH token was used.
              $ref: '#/components/schemas/DateTime'
            expires:
              description: The timestamp of when the SSH token expires.
              $ref: '#/components/schemas/DateTime'
        valid:
          type: boolean
          description: A boolean where true represents the token as being a valid token to be used for connection.
    Scale:
      title: ScaleContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - scale
        contents:
          type: object
          description: Additional information needed to complete the job.
          required:
            - instances
          properties:
            instances:
              type: integer
              description: The number of desired instances to scale to.
    Server:
      title: Server
      type: object
      description: 'The server resource, referring to servers that have been deployed to a Cycle hub.'
      required:
        - id
        - hub_id
        - location_id
        - model_id
        - node_id
        - hostname
        - creator
        - provider
        - cluster
        - features
        - constraints
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        location_id:
          type: string
          description: An identifier for the location this server is deployed to.
        model_id:
          type: string
          description: An identifier for the model of server that is deployed.
        node_id:
          type: string
          description: An identifier for the node.
        hostname:
          type: string
          description: The server hostname.
        creator:
          $ref: '#/components/schemas/Creator'
        provider:
          $ref: '#/components/schemas/ServerProvider'
        cluster:
          type: string
          description: The cluster the given server is deployed to.
        features:
          $ref: '#/components/schemas/ServerFeatures'
        constraints:
          $ref: '#/components/schemas/ServerConstraints'
        state:
          $ref: '#/components/schemas/ServerState'
        events:
          title: ServerEvents
          type: object
          description: A collection of timestamps for each event in the server's lifetime.
          required:
            - created
            - updated
            - deleted
            - provisioning
          properties:
            created:
              description: The timestamp of when the server was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the server was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the server was deleted.
              $ref: '#/components/schemas/DateTime'
            provisioning:
              type: object
              description: Information about the provisioning of the server.
              required:
                - started
                - completed
              properties:
                started:
                  description: A timestamp of when the server started provisioning.
                  $ref: '#/components/schemas/DateTime'
                completed:
                  description: A timestamp of when the server completed provisioning.
                  $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ServerMeta'
    ServerConstraints:
      title: ServerConstraints
      type: object
      description: Constraints to apply to the server.
      required:
        - tags
        - allow
      properties:
        tags:
          description: A list of server tags to put on the given server.
          type: array
          items:
            type: string
        allow:
          type: object
          description: 'Settings for the server, things that are or are not allowed.'
          required:
            - pool
            - services
            - overcommit
          properties:
            pool:
              type: boolean
              description: A boolean where true means - allow containers with no tags specified to be deployed to this server.
            services:
              type: boolean
              description: A boolean where true means - allow service containers to be deployed to this container.
            overcommit:
              type: boolean
              description: A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server.
    ServerFeatures:
      title: ServerFeatures
      type: object
      description: A set of features a given server can have and their information.
      required:
        - sftp
        - base_volume_ gb
      properties:
        sftp:
          type: boolean
          description: A boolean where true means the server accepts incoming SFTP connections through the remote volume integration.
        base_volume_gb:
          type: integer
          description: The size of the base volume (where Cycle stores container images on this server).
    ServerIncludes:
      title: ServerIncludes
      type: object
      description: A resource associated with a server.
      required:
        - locations
        - models
        - providers
      properties:
        locations:
          $ref: '#/components/schemas/LocationsIncludes'
        models:
          $ref: '#/components/schemas/ProviderServersServerIncludes'
        providers:
          $ref: '#/components/schemas/ProvidersIncludes'
    ServerMeta:
      title: ServerMeta
      type: object
      description: A list of meta fields that can be applied to a server.
      properties:
        node:
          type: object
          description: Infrormation about the status of the server.
          required:
            - last_checkin
            - drivers
            - state
            - stats
            - healthy
            - online
          properties:
            last_checkin:
              description: The last time this server checked in with the platform.
              $ref: '#/components/schemas/DateTime'
            drivers:
              description: An array a drivers associated with the given server.
              type: array
              items:
                type: string
            state:
              $ref: '#/components/schemas/ServerState'
            stats:
              $ref: '#/components/schemas/Stats'
            healthy:
              type: boolean
              description: A boolean where true means the platform is reporting the server as healthy.
            online:
              type: boolean
              description: A boolean where true means the server is online and reachable by the platform.
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
    ServerProvider:
      title: ServerProvider
      type: object
      description: A resource regarding the provider a given server is deployed from.
      required:
        - identifier
        - model
        - location
        - server
      properties:
        identifier:
          type: string
          description: An identifier for the provider this server is deployed from.
        model:
          type: string
          description: The model of the server that is deployed.
        location:
          type: string
          description: A location where the server is deployed.
        server:
          type: string
          description: A provider specific identifier for the server.
        init_ips:
          description: The IP's assigned to this server during provisioning.
          type: array
          items:
            type: string
        mac_addr:
          type: string
          description: The mac address for the server.
    ServerSpecs:
      title: ServerSpecs
      description: Specs for a given server
      type: object
      required:
        - cpu
        - gpu
        - memory
        - storage
        - network
        - features
      properties:
        cpu:
          $ref: '#/components/schemas/CPUSpec'
        gpu:
          $ref: '#/components/schemas/GPUSpec'
        memory:
          $ref: '#/components/schemas/MemorySpec'
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageSpec'
        network:
          type: array
          items:
            $ref: '#/components/schemas/NetworkSpec'
        features:
          $ref: '#/components/schemas/FeaturesSpec'
    ServerState:
      title: ServerState
      allOf:
        - required:
            - current
          properties:
            current:
              description: the current state of the server.
              type: string
              enum:
                - new
                - live
                - provisioning
                - offline
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ServerTags:
      title: ServerTags
      description: Tags for a given server.
      type: object
      properties:
        data:
          type: array
          description: An array of server tags.
          items:
            type: string
    ServersIncludes:
      title: ServerIncludes
      description: A resource thats associated with a server.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Server'
    ServersList:
      title: ServerInstances
      type: object
      description: Information about the instances on a server.
      required:
        - id
        - instances
        - hostname
      properties:
        id:
          $ref: '#/components/schemas/ID'
        instances:
          type: object
          description: A summary of resources by state
          required:
            - state
            - total
            - available
          properties:
            state:
              title: CountsByState
              type: object
              description: 'A count of this resource, grouped by state.'
              additionalProperties:
                type: integer
            total:
              type: integer
              description: The total number of this resource
            available:
              type: integer
              description: 'The total number of this resource available, less any deleted ones.'
          example:
            state:
              new: 0
              starting: 0
              reimaging: 1
              migrating: 1
              running: 5
              stopping: 0
              failed: 0
              deleting: 0
              deleted: 0
            total: 7
            available: 5
        hostname:
          type: string
          description: The server hostname.
    Session:
      title: ActivitySession
      type: object
      description: Session info about the activity entry.
      nullable: true
      required:
        - url
        - ip
        - api_key
      properties:
        url:
          type: string
          description: URL endpoint assocaited with the activity context - does not include domain.
        ip:
          type: string
          description: The IP of the account associated with the session.
        api_key:
          type: string
          description: The API key ID.
          nullable: true
    SourceIncludes:
      title: SourceIncludes
      description: A resource associate with an image source.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    Stack:
      title: Stack
      type: object
      description: Stacks are a way to orchestrate multiple containers atomically and automatically.
      required:
        - id
        - name
        - hub_id
        - creator
        - source
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the stack resource.
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/UserScope'
        source:
          $ref: '#/components/schemas/StackSource'
        state:
          $ref: '#/components/schemas/StackState'
        events:
          title: StackEvents
          type: object
          description: A collection of timestamps for each event in the Stacks lifetime.
          required:
            - created
            - updated
            - deleted
            - last_build
          properties:
            created:
              description: The timestamp of when the stack was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack was deleted.
              $ref: '#/components/schemas/DateTime'
            last_build:
              description: The timestamp for the last build of the stack.
              $ref: '#/components/schemas/DateTime'
    StackBuild:
      title: StackBuild
      type: object
      description: A stack build resource.
      required:
        - id
        - hub_id
        - stack_id
        - spec
        - about
        - instructions
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        stack_id:
          type: string
          description: An identifier for the stack related to this build.
        spec:
          $ref: '#/components/schemas/StackSpec'
        about:
          type: object
          description: Information about the stack build.
          required:
            - version
            - description
          properties:
            version:
              type: string
              description: Information about the version of the stack.
            description:
              type: string
              description: Information describing the stack
            git_commit:
              $ref: '#/components/schemas/StackGitCommit'
        instructions:
          type: object
          description: Git information on where to pull stack resources from.
          properties:
            git:
              type: object
              description: Git information specifics.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of information the user is passing.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The actual value to be passed.
        events:
          title: StackBuildEvents
          type: object
          description: A collection of timestamps for each event in the stack build's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the stack build was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack build was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack build was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/StackBuildState'
        meta:
          $ref: '#/components/schemas/StackBuildMeta'
    StackBuildInclude:
      title: StackBuildIncludes
      description: All includable resources linkable to a given stack build.
      type: object
      properties:
        stack_id:
          type: string
          description: The ID for the stack this build is associated with.
        hub_id:
          $ref: '#/components/schemas/HubID'
        about:
          type: object
          description: Information about the stack build.
          required:
            - version
            - description
          properties:
            version:
              type: string
              description: A user defined version of the build.
            description:
              type: string
              description: A user defined description for the build.
            git_commit:
              $ref: '#/components/schemas/StackGitCommit'
        instructions:
          type: object
          description: Git information on where to pull stack resources from.
          properties:
            git:
              type: object
              description: Git information specifics.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of information the user is passing.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The actual value to be passed.
        events:
          title: StackBuildEvents
          type: object
          description: A collection of timestamps for each event in the stack build's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the stack build was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack build was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack build was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/StackBuildState'
    StackBuildIncludes:
      title: StackBuildInclude
      description: A resource thats associated with a stack build.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StackBuild'
    StackBuildMeta:
      title: StackBuildMeta
      type: object
      description: A list of meta fields that can be applied to a stack build.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
    StackBuildState:
      title: StackBuildState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the stack build.
              type: string
              enum:
                - new
                - importing
                - building
                - verifying
                - saving
                - live
                - deploying
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    StackDeployContainersObject:
      title: StackDeployContainersObject
      type: object
      description: This is a map of the container names to update within the environment.
      required:
        - reimage
        - reconfigure
      properties:
        reimage:
          type: boolean
          description: A boolean where true represents the container is to be reimaged.
        reconfigure:
          type: boolean
          description: A boolean where true represents the container is to be reconfigured.
    StackGitCommit:
      title: StackGitCommit
      type: object
      description: Information about the git commit this stack build was created from.
      required:
        - hash
        - message
        - time
        - author
      properties:
        hash:
          type: string
          description: The commit hash for the given stack build.
        message:
          type: string
          description: The commit message for the given stack build hash.
        time:
          description: The time the commit was made.
          $ref: '#/components/schemas/DateTime'
        author:
          type: object
          description: Inforamtion about the author of the commit.
          required:
            - name
            - email
          properties:
            name:
              type: string
              description: The commit authors name.
            email:
              type: string
              description: The commit authors email address.
    StackInclude:
      title: StackIncludes
      description: All includable resources linkable to the given stack.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    StackIncludes:
      title: StackIncludes
      description: A resource associated with a stack.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Stack'
    StackSource:
      title: StackSource
      type: object
      description: A source for a stack to be created from.
      required:
        - type
        - details
      properties:
        type:
          type: string
          description: A type of stack source.
          enum:
            - raw
            - git-repo
        details:
          nullable: true
          type: object
          description: A details object based on the `type` defined in `type`.
          oneOf:
            - $ref: '#/components/schemas/RepoSpec'
            - $ref: '#/components/schemas/StackSpec'
    StackSpec:
      title: StackSpec
      type: object
      description: A stack spec resource.
      required:
        - version
        - containers
      properties:
        version:
          type: string
          description: A string defining the version of the stack spec.
        about:
          type: object
          description: Information about the stack.
          required:
            - description
            - version
          properties:
            version:
              type: string
              description: Internal version information set by the user.
            description:
              type: string
              description: Information describing the stack.
        containers:
          type: object
          description: A list of records defining the stacks containers.
          additionalProperties:
            $ref: '#/components/schemas/Container'
        annotations:
          type: object
          description: Additional meta info about the stack.
          additionalProperties:
            type: string
    StackState:
      title: StackState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the stack.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    StackSummary:
      title: ContainerStackSummary
      description: A summary of the stack this container was created format.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        image:
          type: object
          properties:
            id:
              type: string
              description: The ID of the image used for this container.
        build_id:
          type: string
          description: The ID of the stack build this container is associated with.
        identifier:
          type: string
          description: 'The container identifier, usually the key to the container section of a stack file.'
    State:
      title: State
      description: Information regarding the current state of the resource.
      type: object
      required:
        - changed
      properties:
        changed:
          $ref: '#/components/schemas/DateTime'
        error:
          type: object
          description: The timestamp of when the error was encountered.
          properties:
            time:
              description: The timestamp of when the error was encountered.
              $ref: '#/components/schemas/DateTime'
    StateCountSummary:
      title: ResourceCountSummary
      type: object
      description: A summary of resources by state
      required:
        - state
        - total
        - available
      properties:
        state:
          title: CountsByState
          type: object
          description: 'A count of this resource, grouped by state.'
          additionalProperties:
            type: integer
        total:
          type: integer
          description: The total number of this resource
        available:
          type: integer
          description: 'The total number of this resource available, less any deleted ones.'
      example:
        state:
          new: 0
          starting: 0
          running: 5
          stopping: 0
          deleting: 0
          deleted: 0
        total: 5
        available: 5
    Stats:
      title: NodeMetaStatsStats
      type: object
      description: Statistics that pertain to a specific node.
      required:
        - network
        - uptime
        - cpu
        - load
        - ram
        - storage
        - os
        - versions
      properties:
        network:
          $ref: '#/components/schemas/Network'
        uptime:
          $ref: '#/components/schemas/Uptime'
        cpu:
          $ref: '#/components/schemas/CPU'
        load:
          $ref: '#/components/schemas/Load'
        ram:
          $ref: '#/components/schemas/RAM'
        storage:
          $ref: '#/components/schemas/Storage'
        os:
          $ref: '#/components/schemas/OS'
        versions:
          $ref: '#/components/schemas/Versions'
    Storage:
      title: ServerStatsStorage
      type: object
      description: Statistics about storage for a given server.
      required:
        - volume_groups
        - mounts
      properties:
        volume_groups:
          description: An array of volume group objects.
          type: array
          items:
            type: object
            description: Volume group
            required:
              - name
              - size
              - volumes
            properties:
              name:
                type: string
                description: A name for the volume group.
              size:
                type: integer
                description: A number representing the aggregate group volume size in megabytes.
              volumes:
                description: The actual volumes.
                type: array
                items:
                  type: object
                  required:
                    - name
                    - size
                    - data_percent
                    - meta_percent
                    - pool
                  properties:
                    name:
                      type: string
                      description: The name of the volume.
                    size:
                      type: integer
                      description: The size in megabytes of the volume.
                    data_percent:
                      type: integer
                      description: The percent of the volumes size being used by data.
                    meta_percent:
                      type: integer
                      description: The percent of the volumes size being used by meta data.
                    pool:
                      type: string
                      description: The name of the volume pool this volume is associated with.
        mounts:
          type: object
          description: Records that show information about mounted filesystems where the key is the path to the mount.
          additionalProperties:
            title: MountedFS
            type: object
            description: Mounted filesystem information.
            required:
              - type
              - total
              - free
              - used
            properties:
              device:
                type: string
                description: The device assocaited with the mount.
              type:
                type: string
                description: The type of filesystem in use by the mount.
              mountpoint:
                type: string
                description: The path the mount is associated with.
              total:
                type: integer
                description: The total amount of storage in KB available at this mount.
              free:
                type: integer
                description: The amount of uninitialized storage in KB.
              used:
                type: integer
                description: The amount of storage being used in KB.
    StorageSpec:
      title: StorageServerSpec
      type: object
      description: Information about the storage resources for a given server.
      required:
        - count
        - size_gb
        - type
        - extra
      properties:
        count:
          type: integer
          description: The number of storage devices for a given server.
        size_gb:
          type: integer
          description: 'The total amount of storage on a given server, in GB.'
        type:
          type: string
          description: The type of the storage device(s).
        extra:
          type: object
          description: Extra information about the storage resources for a given server.
          additionalProperties:
            type: string
    Target:
      title: BackupTarget
      type: object
      description: A target for the given backup.
      required:
        - destination
        - path
        - size
      properties:
        destination:
          type: string
          description: The target service to be used for a backup.
          enum:
            - backblaze-b2
        path:
          type: string
          description: The target for where to store the backup on the backup destination service.
        size:
          type: integer
          description: The total size of the backup.
    TaskDescriptor:
      title: TaskDescriptor
      description: 'A task descriptor object is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.'
      type: object
      properties:
        action:
          type: string
          description: The action that was taken.
        job_id:
          type: string
          description: The ID of the job associated with this task.
    TaskState:
      title: TaskState
      allOf:
        - required:
            - current
          properties:
            current:
              description: the current state of the task.
              type: string
              enum:
                - pending
                - error
                - running
                - completed
        - $ref: '#/components/schemas/State'
    TaskStep:
      title: TaskStep
      type: object
      description: A step for a given job task.
      required:
        - caption
        - description
        - started
        - completed
      properties:
        caption:
          type: string
          description: A short description of the step.
        description:
          type: string
          description: A more verbose description.
        started:
          description: A timestamp for when the step started.
          $ref: '#/components/schemas/DateTime'
        completed:
          description: A timestamp for when the step completed.
          $ref: '#/components/schemas/DateTime'
    Telemetry:
      title: ServerStatsTelemetery
      type: object
      description: Statistics about a given servers telemetery data.
      required:
        - time
        - load
        - ram
        - storage_base
        - storage_pool
      properties:
        time:
          description: The timestamp for when the telemetery data was collected.
          $ref: '#/components/schemas/DateTime'
        load:
          $ref: '#/components/schemas/Load'
        ram:
          $ref: '#/components/schemas/RAM'
        storage_base:
          type: object
          description: Telemetry data for the base volume of a given server.
          required:
            - used
            - free
            - total
          properties:
            used:
              type: integer
              description: The amount of storage currently used in the base volume.
            free:
              type: integer
              description: The amount of free space on the base volume.
            total:
              type: integer
              description: The total amount of space on the base volume.
        storage_pool:
          type: object
          description: User data storage across all devices.
          required:
            - data_percent
            - meta_percent
            - total
          properties:
            data_percent:
              type: number
              description: The percentage of storage used by user data.
            meta_percent:
              type: number
              description: 'The percentage of storage used by the file allocation stables, etc.'
            total:
              type: number
              description: The total amount of storage available.
    TelemetryReportRequest:
      title: InstanceTelemetryReportRequest
      type: object
      description: A summary of report requests and when they occured.
      required:
        - instance_id
        - start
        - end
      properties:
        instance_id:
          type: string
          description: The ID of the instance this telemetry reporting pertains to.
        start:
          description: A timestamp of when the snapshot began.
          $ref: '#/components/schemas/DateTime'
        end:
          description: A timestamp of when the snapshot ended.
          $ref: '#/components/schemas/DateTime'
    Term:
      title: BillingTerm
      type: object
      description: Information about a billing term.
      required:
        - start
        - end
        - renew
      properties:
        start:
          description: A timestamp describing the start of a billing term.
          $ref: '#/components/schemas/DateTime'
        end:
          description: A timestamp describing the end of a billing term.
          $ref: '#/components/schemas/DateTime'
        renew:
          type: string
          description: The term renewal period.
          enum:
            - once
            - monthly
            - yearly
          nullable: true
    TriggerKey:
      title: TriggerKey
      type: object
      description: A pipeline trigger key resource.
      required:
        - id
        - name
        - secret
        - creator
        - hub_id
        - pipeline_id
        - state
        - events
        - ips
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the trigger key.
        secret:
          type: string
          description: The secret used when calling the trigger key programmatically.
        creator:
          $ref: '#/components/schemas/Creator'
        hub_id:
          $ref: '#/components/schemas/HubID'
        pipeline_id:
          type: string
          description: The ID for the pipeline related to this trigger key.
        state:
          $ref: '#/components/schemas/TriggerKeyState'
        events:
          title: TriggerKeyEvents
          type: object
          description: A collection of timestamps for each event in the trigger key's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the trigger key was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the trigger key was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the trigger key was deleted.
              $ref: '#/components/schemas/DateTime'
        ips:
          description: An array of ips this trigger key is usable from.
          type: array
          items:
            type: string
    TriggerKeyState:
      title: TriggerKeyState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the trigger key.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    TriggerPipelineAction:
      title: TriggerPipeline
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - trigger
    Uptime:
      title: ServerStatsUptime
      type: object
      description: Statistics describing the uptime of a given server.
      properties:
        seconds:
          type: number
          description: The amount in seconds the server has been up (resets on restart).
        cpu_idle:
          type: number
          description: CPU idle time.
    UsageDatum:
      title: ServerUsageDatum
      type: object
      description: Server usage data.
      required:
        - time
        - nodes
        - memory_gb
      properties:
        time:
          description: A timestamp for when the usage data was collected.
          $ref: '#/components/schemas/DateTime'
        nodes:
          type: integer
          description: The number of nodes the data is pulled from.
        memory_gb:
          type: integer
          description: A number in GB representing memory.
    UserScope:
      title: UserScope
      description: A type of creator and a matching identifier.
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: The type of user that created the resource.
          enum:
            - account
            - environment
            - platform
            - platform-pipeline
            - employee
            - api-key
            - visitor
        id:
          $ref: '#/components/schemas/ID'
    VPNInfoReturn:
      title: VPNInfo
      type: object
      description: A summary of a VPN service for a given environment.
      required:
        - url
        - service
      properties:
        url:
          type: string
          description: A url associated with the VPN service.
        service:
          $ref: '#/components/schemas/VpnEnvironmentService'
    VPNLogins:
      title: VPNLogins
      type: object
      description: A VPN login event record.
      required:
        - id
        - username
        - environment_id
        - ip
        - time
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          type: string
          description: The username used when logging in.
        environment_id:
          type: string
          description: The ID of the environment the VPN service is in.
        ip:
          type: string
          description: The IP address of the machine the user has logged in from.
        time:
          description: The timestamp for when the login occured.
          $ref: '#/components/schemas/DateTime'
        success:
          type: boolean
          description: A boolean where true means the login attempt was successful.
    VPNUsers:
      title: VPNUser
      type: object
      description: A VPN user for a given VPN.
      required:
        - id
        - username
        - creator
        - last_login
        - hub_id
        - environment_id
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          type: string
          description: The username for the login.
        creator:
          $ref: '#/components/schemas/Creator'
        last_login:
          description: A timestamp of the last time the user logged into the VPN.
          $ref: '#/components/schemas/DateTime'
        hub_id:
          $ref: '#/components/schemas/HubID'
        environment_id:
          type: string
          description: An identifier for the environment the VPN service is associated with.
        events:
          title: VPNUserEvents
          type: object
          description: A collection of timestamps for each event in the VPN user's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the VPN user was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the VPN user was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the VPN user was deleted.
              $ref: '#/components/schemas/DateTime'
    Versions:
      title: ServerStatsVersions
      type: object
      description: Information about the versions of Cycle services on a given server.
      required:
        - services
      properties:
        services:
          description: A list of records about Cycle services.
          type: object
          enum:
            - factory
            - compute
            - compute-spawner
            - compute-proxy
            - public-api
            - admin-api
            - admin-portal
            - oauth
            - portal
            - console
            - manager
            - dns
            - agent
            - agent-spawner
            - nexus
          additionalProperties:
            type: string
    VolumeSummary:
      title: VolumeSummary
      type: object
      description: A summary of relevant volume information.
      required:
        - id
        - hash
        - config
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hash:
          type: string
          description: A unique hash for the given volume.
        config:
          $ref: '#/components/schemas/Volumes'
    Volumes:
      title: ContainerVolumes
      type: object
      description: Configuration settings for container volumes.
      required:
        - read_only
        - destination
      properties:
        read_only:
          type: boolean
          description: A boolean where true marks the volume as read only.
        local:
          type: object
          description: Configuration for settings local to the container filesystem.
          required:
            - max_size
          properties:
            max_size:
              type: string
              description: The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes.
              example: 10G
            storage_pool:
              type: boolean
              description: A boolean where true signifies using the largest drive over 2TB for the target server.
        destination:
          type: string
          description: The mountpoint path for the container.
        reomte_access:
          type: object
          description: Configuration settings for remotely accessing the container volume.
          required:
            - enable
            - password
          properties:
            enable:
              type: boolean
              description: A boolean where true represents this container volume being open to remote access connections over SFTP.
            password:
              type: object
              description: Password configuration settings for the remote access of the container volume.
              required:
                - algorithm
                - data
              properties:
                algorithm:
                  type: string
                  description: The hashing algorithm used to has the password.
                  enum:
                    - raw
                    - sha512
                    - md5
                data:
                  type: string
                  description: The raw or hashed password.
    VpnEnvironmentService:
      title: VpnEnvironmentService
      type: object
      nullable: true
      description: Information about the environments vpn service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the VPN service is enabled.
        container_id:
          type: string
          description: The ID of the VPN service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          nullable: true
          description: The config object for the VPN service.
          required:
            - allow_internet
            - auth
          properties:
            allow_internet:
              type: boolean
              description: 'If true, routes all traffic through the VPN, even non-Cycle traffic.'
            auth:
              type: object
              description: Auth configuration for the VPN.
              required:
                - webhook
                - cycle_accounts
              properties:
                webhook:
                  type: string
                  nullable: true
                  description: 'A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.'
                cycle_accounts:
                  type: boolean
                  description: 'If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.'
                vpn_accounts:
                  type: boolean
                  description: 'If true, allows the custom VPN accounts to log in to the VPN.'
    WebHookPost:
      title: PipelineWebhookPost
      description: Information used in creating a pipeline webhook post step.
      type: object
      required:
        - url
        - from
      properties:
        url:
          type: string
          description: The url to post to.
        from:
          type: object
          description: The stage and step to report on.
          required:
            - step
          properties:
            stage:
              type: string
              description: An identifier for the stage the step being reported on resides in.
            step:
              type: string
              description: An identifier for the step to be reported on.
    Zone:
      title: DNSZone
      type: object
      description: 'DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.'
      required:
        - id
        - hub_id
        - creator
        - origin
        - hosted
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/Creator'
        origin:
          type: string
          description: The origin for the given DNS zone.
        hosted:
          type: boolean
          description: A boolean where true represents this zone is a hosted zone.
        state:
          $ref: '#/components/schemas/ZoneState'
        events:
          title: ZoneEvents
          type: object
          description: A collection of timestamps for each event in the DNS zone's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_verification
            - verified
          properties:
            created:
              description: The timestamp of when the DNS zone was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the DNS zone was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the DNS zone was deleted.
              $ref: '#/components/schemas/DateTime'
            last_verification:
              description: The timestamp of when the DNS zone was last_verification.
              $ref: '#/components/schemas/DateTime'
            verified:
              description: The timestamp of when the DNS zone was verified.
              $ref: '#/components/schemas/DateTime'
    ZoneIncludes:
      title: ZoneIncludes
      description: All includable resources linkable to the given Zone.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    ZoneState:
      title: DNSZoneState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the zone.
              type: string
              enum:
                - new
                - pending
                - verifying
                - live
                - disabled
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    _deploy:
      title: ContainerDeploy
      type: object
      description: Deployment configuration for the given container.
      required:
        - instances
      properties:
        instances:
          type: integer
          description: The number of initial desired instances for a given container.
        strategy:
          type: string
          description: The deployment strategy to use when scaling the given container.
          enum:
            - resource-density
            - first-available
            - manual
            - high-availability
        constraints:
          type: object
          description: Settings that give more granular control over deployment targets and conditions.
          properties:
            node:
              type: object
              description: Constraint settings related to which nodes an instance can be deployed to.
              required:
                - tags
              properties:
                tags:
                  type: object
                  description: Lists of server tags that formally declair servers that match the criteria for deployment.
                  properties:
                    any:
                      type: array
                      items:
                        type: string
                      description: A list of tags where a server matching any tags from the list is qualified as a deployment target.
                    all:
                      type: array
                      items:
                        type: string
                      description: A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target.
            containers:
              type: array
              items:
                type: string
              description: An array of container identifiers the platform will send the start signal to before sending the start signal to this container.
        shutdown:
          type: object
          description: Configuration for what to do during container shutdown.
          required:
            - graceful_timeout
            - signals
          properties:
            graceful_timeout:
              type: integer
              description: The time in seconds the platform will wait for a container to stop gracefully.
            signals:
              type: array
              items:
                type: string
              description: Process signal sent to the container process.
              enum:
                - SIGTERM
                - SIGINT
                - SIGUSR1
                - SIGUSR2
                - SIGHUP
                - SIGQUIT
        startup:
          type: object
          description: Configurations for container startup.
          properties:
            delay:
              type: integer
              description: A value in seconds representing how long the platform will wait before sending the start signal to the given container.
        restart:
          type: object
          description: Configurations for container restart events.
          required:
            - condition
            - delay
            - max_attempts
          properties:
            condition:
              type: string
              description: Policy for what should happen in the event of a container dying.
              enum:
                - always
                - never
                - failure
            delay:
              type: integer
              description: Time in seconds the platform will wait before trying to restart the container.
            max_attempts:
              type: integer
              description: The amount of times the platform will attempt the restart policies.
        health_check:
          type: object
          description: Configuration for determining the health of a container.
          required:
            - command
            - retries
            - interval
            - timeout
            - restart
          properties:
            command:
              type: string
              description: The command that will be run to verify the health of the container.
            retries:
              type: integer
              description: The number of times the platform will retry the command before marking the container unhealthy.
            interval:
              type: integer
              description: The number of seconds between retries.
            timeout:
              type: integer
              description: The number of time in seconds before a health check attempt times out.
            restart:
              type: boolean
              description: A boolean where `true` represents the desire for a container to restart if unhealthy.
        telemetry:
          type: object
          description: Configuration settings for container telemetery reporting.
          required:
            - retention
            - interval
            - disable
          properties:
            retention:
              type: integer
              description: The number in seconds for telemetry data to be retained.
            interval:
              type: integer
              description: The number in seconds between samples.
            disable:
              type: boolean
              description: A boolean where true disables all telemetry reporting for this container.
            webhook:
              type: string
              description: An endpoint to report the telemetry data to.
